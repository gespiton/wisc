Terminals which are not used

   EPLUS
   DPLUS
   EMINUS
   DMINUS
   EMULT
   EDIVIDE
   EMODULUS
   OPPOSITE


State 0 conflicts: 5 shift/reduce, 1 reduce/reduce
State 7 conflicts: 1 shift/reduce
State 19 conflicts: 10 shift/reduce, 2 reduce/reduce
State 39 conflicts: 12 reduce/reduce
State 50 conflicts: 2 shift/reduce
State 64 conflicts: 1 shift/reduce
State 73 conflicts: 2 shift/reduce
State 74 conflicts: 11 shift/reduce
State 81 conflicts: 2 shift/reduce
State 84 conflicts: 1 shift/reduce
State 89 conflicts: 11 shift/reduce
State 104 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 2 shift/reduce
State 114 conflicts: 11 shift/reduce
State 132 conflicts: 1 shift/reduce
State 138 conflicts: 10 shift/reduce
State 139 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 157 conflicts: 15 reduce/reduce
State 158 conflicts: 2 shift/reduce, 1 reduce/reduce
State 161 conflicts: 1 shift/reduce, 1 reduce/reduce
State 164 conflicts: 2 shift/reduce, 10 reduce/reduce
State 166 conflicts: 1 shift/reduce, 10 reduce/reduce
State 181 conflicts: 5 shift/reduce
State 185 conflicts: 1 shift/reduce
State 186 conflicts: 1 shift/reduce
State 230 conflicts: 3 shift/reduce
State 239 conflicts: 1 shift/reduce
State 240 conflicts: 4 shift/reduce
State 251 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 endls: endls ENDL
    2      | ENDL

    3 endc: SEMICOLON
    4     | endls

    5 list: COMMA
    6     | list endls

    7 lists: /* empty */
    8      | list
    9      | endls

   10 name: NAME

   11 program: /* empty */
   12        | init
   13        | space

   14 arrayType: defineType BRACKET

   15 arrayExpr: LBRACKET exprList RBRACKET

   16 dictType: LBRACE defineType RBRACE

   17 dictExpr: LBRACE dictContext RBRACE

   18 dictContext: /* empty */
   19            | dictContext lists dictList
   20            | dictList
   21            | endls dictContext
   22            | dictContext endls

   23 dictList: name expr

   24 expr: expr AND expr
   25     | expr OR expr
   26     | expr EQ expr
   27     | expr NE expr
   28     | expr GT expr
   29     | expr GE expr
   30     | expr LT expr
   31     | expr LE expr
   32     | expr PLUS expr
   33     | expr MINUS expr
   34     | expr MULT expr
   35     | expr DIVIDE expr
   36     | expr MODULUS expr
   37     | RPAREN expr LPAREN
   38     | STRING
   39     | VALUE_VOID
   40     | VALUE_BOOLEAN
   41     | INT
   42     | NUMBER
   43     | defineIden
   44     | funcExpr
   45     | arrayExpr
   46     | dictExpr

   47 exprList: /* empty */
   48         | exprList lists expr
   49         | expr
   50         | endls exprList
   51         | exprList endls

   52 @1: /* empty */

   53 @2: /* empty */

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

   55 @3: /* empty */

   56 defineFunc: defineType name funcHeaderV @3 subSpace

   57 @4: /* empty */

   58 funcExpr: funcHeaderE @4 subSpace

   59 funcHeaderV: LPAREN paramList RPAREN

   60 @5: /* empty */

   61 funcHeaderE: LPAREN @5 paramList RPAREN COLON defineType

   62 funcType: defineType COLON LPAREN typeList RPAREN

   63 defineIden: name
   64           | idenFunc
   65           | idenBracket

   66 idenFunc: defineIden LPAREN exprList RPAREN
   67         | defineIden LPAREN RPAREN

   68 idenBracket: defineIden LBRACKET expr RBRACKET

   69 defineIf: ifPart
   70         | ifPart elseIfParts
   71         | ifPart elsePart
   72         | ifPart elseIfParts elsePart

   73 @6: /* empty */

   74 ifPart: IF LPAREN expr RPAREN @6 subSpace

   75 elseIfParts: elseIfParts elseIfPart
   76            | elseIfPart

   77 @7: /* empty */

   78 elseIfPart: ELSE IF LPAREN expr RPAREN @7 subSpace

   79 @8: /* empty */

   80 elsePart: ELSE @8 subSpace

   81 init: DINIT endls initContext DEND

   82 initContext: initOperator

   83 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE endls

   84 initOperatorContexts: initOperatorContexts initOperatorContext
   85                     | initOperatorContext

   86 initOperatorContext: endls
   87                    | defineType operator defineType ASSIGN name endls

   88 assignment: /* empty */
   89           | defineIden ASSIGN expr

   90 iteration: assignment
   91          | idenFunc

   92 operator: PLUS
   93         | MINUS
   94         | MULT
   95         | DIVIDE
   96         | MODULUS
   97         | EQ
   98         | NE
   99         | GT
  100         | GE
  101         | LT
  102         | LE

  103 defineParam: defineType name
  104            | defineType name ASSIGN expr

  105 paramListP: paramListP list defineParam
  106           | defineParam

  107 paramList: /* empty */
  108          | paramListP
  109          | endls paramList
  110          | paramList endls

  111 subSpace: LBRACE space RBRACE
  112         | endls subSpace

  113 space: defineStats stats

  114 controlSpace: RETURN expr
  115             | RETURN
  116             | BREAK
  117             | CONTINUE

  118 stats: /* empty */
  119      | stats stat
  120      | stat

  121 stat: endc
  122     | iteration endc
  123     | controlSpace endc
  124     | defineIf endc
  125     | defineWhile endc
  126     | defineFor endc
  127     | defineSwitch endc

  128 defineStats: /* empty */
  129            | defineStats defineStat
  130            | defineStat

  131 defineStat: endc
  132           | defineFunc endc
  133           | defineVariale endc

  134 @9: /* empty */

  135 defineSwitch: SWITCH LPAREN expr RPAREN @9 switchSpace

  136 switchSpace: LBRACE switchStats RBRACE
  137            | endls switchSpace

  138 switchStats: switchStats switchStat
  139            | switchStat

  140 switchStat: /* empty */
  141           | endls

  142 @10: /* empty */

  143 switchStat: CASE LPAREN expr RPAREN @10 subSpace

  144 @11: /* empty */

  145 switchStat: DEFAULT @11 subSpace

  146 defineType: name
  147           | funcType
  148           | arrayType
  149           | dictType

  150 typeListP: typeListP list defineType
  151          | defineType

  152 typeList: /* empty */
  153         | typeListP

  154 defineVariale: paramListP
  155              | CONST paramListP

  156 @12: /* empty */

  157 defineWhile: WHILE LPAREN expr RPAREN @12 subSpace


Terminals, with rules where they appear

$end (0) 0
error (256)
OR (258) 25
AND (259) 24
NE (260) 27 98
EQ (261) 26 97
GE (262) 29 100
GT (263) 28 99
LE (264) 31 102
LT (265) 30 101
MINUS (266) 33 93
PLUS (267) 32 92
MODULUS (268) 36 96
DIVIDE (269) 35 95
MULT (270) 34 94
NAME (271) 10
ENDL (272) 1 2
INT (273) 41
NUMBER (274) 42
STRING (275) 38
VALUE_BOOLEAN (276) 40
VALUE_VOID (277) 39
SEMICOLON (278) 3 54
COLON (279) 61 62
ASSIGN (280) 87 89 104
RPAREN (281) 37 54 59 61 62 66 67 74 78 135 143 157
LPAREN (282) 37 54 59 61 62 66 67 74 78 135 143 157
RBRACE (283) 16 17 83 111 136
LBRACE (284) 16 17 83 111 136
COMMA (285) 5
BRACKET (286) 14
RBRACKET (287) 15 68
LBRACKET (288) 15 68
DINIT (289) 81
DEND (290) 81
RETURN (291) 114 115
IF (292) 74 78
ELSE (293) 78 80
FOR (294) 54
WHILE (295) 157
SWITCH (296) 135
CASE (297) 143
DEFAULT (298) 145
BREAK (299) 116
CONTINUE (300) 117
OPERATOR (301) 83
CONST (302) 155
EPLUS (303)
DPLUS (304)
EMINUS (305)
DMINUS (306)
EMULT (307)
EDIVIDE (308)
EMODULUS (309)
OPPOSITE (310)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
endls (57)
    on left: 1 2, on right: 1 4 6 9 21 22 50 51 81 83 86 87 109 110
    112 137 141
endc (58)
    on left: 3 4, on right: 121 122 123 124 125 126 127 131 132 133
list (59)
    on left: 5 6, on right: 6 8 105 150
lists (60)
    on left: 7 8 9, on right: 19 48
name (61)
    on left: 10, on right: 23 56 63 87 103 104 146
program (62)
    on left: 11 12 13, on right: 0
arrayType (63)
    on left: 14, on right: 148
arrayExpr (64)
    on left: 15, on right: 45
dictType (65)
    on left: 16, on right: 149
dictExpr (66)
    on left: 17, on right: 46
dictContext (67)
    on left: 18 19 20 21 22, on right: 17 19 21 22
dictList (68)
    on left: 23, on right: 19 20
expr (69)
    on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
    42 43 44 45 46, on right: 23 24 25 26 27 28 29 30 31 32 33 34 35
    36 37 48 49 54 68 74 78 89 104 114 135 143 157
exprList (70)
    on left: 47 48 49 50 51, on right: 15 48 50 51 66
defineFor (71)
    on left: 54, on right: 126
@1 (72)
    on left: 52, on right: 54
@2 (73)
    on left: 53, on right: 54
defineFunc (74)
    on left: 56, on right: 132
@3 (75)
    on left: 55, on right: 56
funcExpr (76)
    on left: 58, on right: 44
@4 (77)
    on left: 57, on right: 58
funcHeaderV (78)
    on left: 59, on right: 56
funcHeaderE (79)
    on left: 61, on right: 58
@5 (80)
    on left: 60, on right: 61
funcType (81)
    on left: 62, on right: 147
defineIden (82)
    on left: 63 64 65, on right: 43 66 67 68 89
idenFunc (83)
    on left: 66 67, on right: 64 91
idenBracket (84)
    on left: 68, on right: 65
defineIf (85)
    on left: 69 70 71 72, on right: 124
ifPart (86)
    on left: 74, on right: 69 70 71 72
@6 (87)
    on left: 73, on right: 74
elseIfParts (88)
    on left: 75 76, on right: 70 72 75
elseIfPart (89)
    on left: 78, on right: 75 76
@7 (90)
    on left: 77, on right: 78
elsePart (91)
    on left: 80, on right: 71 72
@8 (92)
    on left: 79, on right: 80
init (93)
    on left: 81, on right: 12
initContext (94)
    on left: 82, on right: 81
initOperator (95)
    on left: 83, on right: 82
initOperatorContexts (96)
    on left: 84 85, on right: 83 84
initOperatorContext (97)
    on left: 86 87, on right: 84 85
assignment (98)
    on left: 88 89, on right: 90
iteration (99)
    on left: 90 91, on right: 54 122
operator (100)
    on left: 92 93 94 95 96 97 98 99 100 101 102, on right: 87
defineParam (101)
    on left: 103 104, on right: 105 106
paramListP (102)
    on left: 105 106, on right: 105 108 154 155
paramList (103)
    on left: 107 108 109 110, on right: 54 59 61 109 110
subSpace (104)
    on left: 111 112, on right: 54 56 58 74 78 80 112 143 145 157
space (105)
    on left: 113, on right: 13 111
controlSpace (106)
    on left: 114 115 116 117, on right: 123
stats (107)
    on left: 118 119 120, on right: 113 119
stat (108)
    on left: 121 122 123 124 125 126 127, on right: 119 120
defineStats (109)
    on left: 128 129 130, on right: 113 129
defineStat (110)
    on left: 131 132 133, on right: 129 130
defineSwitch (111)
    on left: 135, on right: 127
@9 (112)
    on left: 134, on right: 135
switchSpace (113)
    on left: 136 137, on right: 135 137
switchStats (114)
    on left: 138 139, on right: 136 138
switchStat (115)
    on left: 140 141 143 145, on right: 138 139
@10 (116)
    on left: 142, on right: 143
@11 (117)
    on left: 144, on right: 145
defineType (118)
    on left: 146 147 148 149, on right: 14 16 56 61 62 87 103 104 150
    151
typeListP (119)
    on left: 150 151, on right: 150 153
typeList (120)
    on left: 152 153, on right: 62
defineVariale (121)
    on left: 154 155, on right: 133
defineWhile (122)
    on left: 157, on right: 125
@12 (123)
    on left: 156, on right: 157


state 0

    0 $accept: . program $end

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    DINIT      shift, and go to state 5
    CONST      shift, and go to state 6

    $end       reduce using rule 11 (program)
    $end       [reduce using rule 128 (defineStats)]
    NAME       [reduce using rule 128 (defineStats)]
    ENDL       [reduce using rule 128 (defineStats)]
    SEMICOLON  [reduce using rule 128 (defineStats)]
    LBRACE     [reduce using rule 128 (defineStats)]
    CONST      [reduce using rule 128 (defineStats)]
    $default   reduce using rule 128 (defineStats)

    endls          go to state 7
    endc           go to state 8
    name           go to state 9
    program        go to state 10
    arrayType      go to state 11
    dictType       go to state 12
    defineFunc     go to state 13
    funcType       go to state 14
    init           go to state 15
    defineParam    go to state 16
    paramListP     go to state 17
    space          go to state 18
    defineStats    go to state 19
    defineStat     go to state 20
    defineType     go to state 21
    defineVariale  go to state 22


state 1

   10 name: NAME .

    $default  reduce using rule 10 (name)


state 2

    2 endls: ENDL .

    $default  reduce using rule 2 (endls)


state 3

    3 endc: SEMICOLON .

    $default  reduce using rule 3 (endc)


state 4

   16 dictType: LBRACE . defineType RBRACE

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 23


state 5

   81 init: DINIT . endls initContext DEND

    ENDL  shift, and go to state 2

    endls  go to state 24


state 6

  155 defineVariale: CONST . paramListP

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 25
    defineType   go to state 26


state 7

    1 endls: endls . ENDL
    4 endc: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 4 (endc)]
    $default  reduce using rule 4 (endc)


state 8

  131 defineStat: endc .

    $default  reduce using rule 131 (defineStat)


state 9

  146 defineType: name .

    $default  reduce using rule 146 (defineType)


state 10

    0 $accept: program . $end

    $end  shift, and go to state 28


state 11

  148 defineType: arrayType .

    $default  reduce using rule 148 (defineType)


state 12

  149 defineType: dictType .

    $default  reduce using rule 149 (defineType)


state 13

  132 defineStat: defineFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 29


state 14

  147 defineType: funcType .

    $default  reduce using rule 147 (defineType)


state 15

   12 program: init .

    $default  reduce using rule 12 (program)


state 16

  106 paramListP: defineParam .

    $default  reduce using rule 106 (paramListP)


state 17

  105 paramListP: paramListP . list defineParam
  154 defineVariale: paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 154 (defineVariale)

    list  go to state 31


state 18

   13 program: space .

    $default  reduce using rule 13 (program)


state 19

  113 space: defineStats . stats
  129 defineStats: defineStats . defineStat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    RETURN     shift, and go to state 32
    IF         shift, and go to state 33
    FOR        shift, and go to state 34
    WHILE      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    CONTINUE   shift, and go to state 38
    CONST      shift, and go to state 6

    NAME       [reduce using rule 118 (stats)]
    ENDL       [reduce using rule 88 (assignment)]
    ENDL       [reduce using rule 118 (stats)]
    SEMICOLON  [reduce using rule 88 (assignment)]
    SEMICOLON  [reduce using rule 118 (stats)]
    RETURN     [reduce using rule 118 (stats)]
    IF         [reduce using rule 118 (stats)]
    FOR        [reduce using rule 118 (stats)]
    WHILE      [reduce using rule 118 (stats)]
    SWITCH     [reduce using rule 118 (stats)]
    BREAK      [reduce using rule 118 (stats)]
    CONTINUE   [reduce using rule 118 (stats)]
    $default   reduce using rule 118 (stats)

    endls          go to state 7
    endc           go to state 39
    name           go to state 40
    arrayType      go to state 11
    dictType       go to state 12
    defineFor      go to state 41
    defineFunc     go to state 13
    funcType       go to state 14
    defineIden     go to state 42
    idenFunc       go to state 43
    idenBracket    go to state 44
    defineIf       go to state 45
    ifPart         go to state 46
    assignment     go to state 47
    iteration      go to state 48
    defineParam    go to state 16
    paramListP     go to state 17
    controlSpace   go to state 49
    stats          go to state 50
    stat           go to state 51
    defineStat     go to state 52
    defineSwitch   go to state 53
    defineType     go to state 21
    defineVariale  go to state 22
    defineWhile    go to state 54


state 20

  130 defineStats: defineStat .

    $default  reduce using rule 130 (defineStats)


state 21

   14 arrayType: defineType . BRACKET
   56 defineFunc: defineType . name funcHeaderV @3 subSpace
   62 funcType: defineType . COLON LPAREN typeList RPAREN
  103 defineParam: defineType . name
  104            | defineType . name ASSIGN expr

    NAME     shift, and go to state 1
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    name  go to state 57


state 22

  133 defineStat: defineVariale . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 58


state 23

   14 arrayType: defineType . BRACKET
   16 dictType: LBRACE defineType . RBRACE
   62 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 55
    RBRACE   shift, and go to state 59
    BRACKET  shift, and go to state 56


state 24

    1 endls: endls . ENDL
   81 init: DINIT endls . initContext DEND

    ENDL      shift, and go to state 27
    OPERATOR  shift, and go to state 60

    initContext   go to state 61
    initOperator  go to state 62


state 25

  105 paramListP: paramListP . list defineParam
  155 defineVariale: CONST paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 155 (defineVariale)

    list  go to state 31


state 26

   14 arrayType: defineType . BRACKET
   62 funcType: defineType . COLON LPAREN typeList RPAREN
  103 defineParam: defineType . name
  104            | defineType . name ASSIGN expr

    NAME     shift, and go to state 1
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    name  go to state 63


state 27

    1 endls: endls ENDL .

    $default  reduce using rule 1 (endls)


state 28

    0 $accept: program $end .

    $default  accept


state 29

  132 defineStat: defineFunc endc .

    $default  reduce using rule 132 (defineStat)


state 30

    5 list: COMMA .

    $default  reduce using rule 5 (list)


state 31

    6 list: list . endls
  105 paramListP: paramListP list . defineParam

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls        go to state 64
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 65
    defineType   go to state 26


state 32

  114 controlSpace: RETURN . expr
  115             | RETURN .

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    $default  reduce using rule 115 (controlSpace)

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 78
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 33

   74 ifPart: IF . LPAREN expr RPAREN @6 subSpace

    LPAREN  shift, and go to state 83


state 34

   54 defineFor: FOR . LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    LPAREN  shift, and go to state 84


state 35

  157 defineWhile: WHILE . LPAREN expr RPAREN @12 subSpace

    LPAREN  shift, and go to state 85


state 36

  135 defineSwitch: SWITCH . LPAREN expr RPAREN @9 switchSpace

    LPAREN  shift, and go to state 86


state 37

  116 controlSpace: BREAK .

    $default  reduce using rule 116 (controlSpace)


state 38

  117 controlSpace: CONTINUE .

    $default  reduce using rule 117 (controlSpace)


state 39

  121 stat: endc .
  131 defineStat: endc .

    $end       reduce using rule 121 (stat)
    $end       [reduce using rule 131 (defineStat)]
    NAME       reduce using rule 121 (stat)
    NAME       [reduce using rule 131 (defineStat)]
    ENDL       reduce using rule 121 (stat)
    ENDL       [reduce using rule 131 (defineStat)]
    SEMICOLON  reduce using rule 121 (stat)
    SEMICOLON  [reduce using rule 131 (defineStat)]
    RBRACE     reduce using rule 121 (stat)
    RBRACE     [reduce using rule 131 (defineStat)]
    LBRACE     reduce using rule 131 (defineStat)
    RETURN     reduce using rule 121 (stat)
    RETURN     [reduce using rule 131 (defineStat)]
    IF         reduce using rule 121 (stat)
    IF         [reduce using rule 131 (defineStat)]
    FOR        reduce using rule 121 (stat)
    FOR        [reduce using rule 131 (defineStat)]
    WHILE      reduce using rule 121 (stat)
    WHILE      [reduce using rule 131 (defineStat)]
    SWITCH     reduce using rule 121 (stat)
    SWITCH     [reduce using rule 131 (defineStat)]
    BREAK      reduce using rule 121 (stat)
    BREAK      [reduce using rule 131 (defineStat)]
    CONTINUE   reduce using rule 121 (stat)
    CONTINUE   [reduce using rule 131 (defineStat)]
    CONST      reduce using rule 131 (defineStat)
    $default   reduce using rule 121 (stat)


state 40

   63 defineIden: name .
  146 defineType: name .

    NAME      reduce using rule 146 (defineType)
    COLON     reduce using rule 146 (defineType)
    BRACKET   reduce using rule 146 (defineType)
    $default  reduce using rule 63 (defineIden)


state 41

  126 stat: defineFor . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 87


state 42

   66 idenFunc: defineIden . LPAREN exprList RPAREN
   67         | defineIden . LPAREN RPAREN
   68 idenBracket: defineIden . LBRACKET expr RBRACKET
   89 assignment: defineIden . ASSIGN expr

    ASSIGN    shift, and go to state 88
    LPAREN    shift, and go to state 89
    LBRACKET  shift, and go to state 90


state 43

   64 defineIden: idenFunc .
   91 iteration: idenFunc .

    ENDL       reduce using rule 91 (iteration)
    SEMICOLON  reduce using rule 91 (iteration)
    RPAREN     reduce using rule 91 (iteration)
    $default   reduce using rule 64 (defineIden)


state 44

   65 defineIden: idenBracket .

    $default  reduce using rule 65 (defineIden)


state 45

  124 stat: defineIf . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 91


state 46

   69 defineIf: ifPart .
   70         | ifPart . elseIfParts
   71         | ifPart . elsePart
   72         | ifPart . elseIfParts elsePart

    ELSE  shift, and go to state 92

    $default  reduce using rule 69 (defineIf)

    elseIfParts  go to state 93
    elseIfPart   go to state 94
    elsePart     go to state 95


state 47

   90 iteration: assignment .

    $default  reduce using rule 90 (iteration)


state 48

  122 stat: iteration . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 96


state 49

  123 stat: controlSpace . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 97


state 50

  113 space: defineStats stats .
  119 stats: stats . stat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    RETURN     shift, and go to state 32
    IF         shift, and go to state 33
    FOR        shift, and go to state 34
    WHILE      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    CONTINUE   shift, and go to state 38

    ENDL       [reduce using rule 88 (assignment)]
    SEMICOLON  [reduce using rule 88 (assignment)]
    $default   reduce using rule 113 (space)

    endls         go to state 7
    endc          go to state 98
    name          go to state 75
    defineFor     go to state 41
    defineIden    go to state 42
    idenFunc      go to state 43
    idenBracket   go to state 44
    defineIf      go to state 45
    ifPart        go to state 46
    assignment    go to state 47
    iteration     go to state 48
    controlSpace  go to state 49
    stat          go to state 99
    defineSwitch  go to state 53
    defineWhile   go to state 54


state 51

  120 stats: stat .

    $default  reduce using rule 120 (stats)


state 52

  129 defineStats: defineStats defineStat .

    $default  reduce using rule 129 (defineStats)


state 53

  127 stat: defineSwitch . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 100


state 54

  125 stat: defineWhile . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 101


state 55

   62 funcType: defineType COLON . LPAREN typeList RPAREN

    LPAREN  shift, and go to state 102


state 56

   14 arrayType: defineType BRACKET .

    $default  reduce using rule 14 (arrayType)


state 57

   56 defineFunc: defineType name . funcHeaderV @3 subSpace
  103 defineParam: defineType name .
  104            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 103
    LPAREN  shift, and go to state 104

    $default  reduce using rule 103 (defineParam)

    funcHeaderV  go to state 105


state 58

  133 defineStat: defineVariale endc .

    $default  reduce using rule 133 (defineStat)


state 59

   16 dictType: LBRACE defineType RBRACE .

    $default  reduce using rule 16 (dictType)


state 60

   83 initOperator: OPERATOR . RBRACE initOperatorContexts LBRACE endls

    RBRACE  shift, and go to state 106


state 61

   81 init: DINIT endls initContext . DEND

    DEND  shift, and go to state 107


state 62

   82 initContext: initOperator .

    $default  reduce using rule 82 (initContext)


state 63

  103 defineParam: defineType name .
  104            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 103

    $default  reduce using rule 103 (defineParam)


state 64

    1 endls: endls . ENDL
    6 list: list endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 6 (list)]
    $default  reduce using rule 6 (list)


state 65

  105 paramListP: paramListP list defineParam .

    $default  reduce using rule 105 (paramListP)


state 66

   41 expr: INT .

    $default  reduce using rule 41 (expr)


state 67

   42 expr: NUMBER .

    $default  reduce using rule 42 (expr)


state 68

   38 expr: STRING .

    $default  reduce using rule 38 (expr)


state 69

   40 expr: VALUE_BOOLEAN .

    $default  reduce using rule 40 (expr)


state 70

   39 expr: VALUE_VOID .

    $default  reduce using rule 39 (expr)


state 71

   37 expr: RPAREN . expr LPAREN

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 108
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 72

   61 funcHeaderE: LPAREN . @5 paramList RPAREN COLON defineType

    $default  reduce using rule 60 (@5)

    @5  go to state 109


state 73

   17 dictExpr: LBRACE . dictContext RBRACE

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 2

    NAME      [reduce using rule 18 (dictContext)]
    ENDL      [reduce using rule 18 (dictContext)]
    $default  reduce using rule 18 (dictContext)

    endls        go to state 110
    name         go to state 111
    dictContext  go to state 112
    dictList     go to state 113


state 74

   15 arrayExpr: LBRACKET . exprList RBRACKET

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 2
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 114
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 115
    exprList     go to state 116
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 75

   63 defineIden: name .

    $default  reduce using rule 63 (defineIden)


state 76

   45 expr: arrayExpr .

    $default  reduce using rule 45 (expr)


state 77

   46 expr: dictExpr .

    $default  reduce using rule 46 (expr)


state 78

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  114 controlSpace: RETURN expr .

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 114 (controlSpace)


state 79

   44 expr: funcExpr .

    $default  reduce using rule 44 (expr)


state 80

   58 funcExpr: funcHeaderE . @4 subSpace

    $default  reduce using rule 57 (@4)

    @4  go to state 130


state 81

   43 expr: defineIden .
   66 idenFunc: defineIden . LPAREN exprList RPAREN
   67         | defineIden . LPAREN RPAREN
   68 idenBracket: defineIden . LBRACKET expr RBRACKET

    LPAREN    shift, and go to state 89
    LBRACKET  shift, and go to state 90

    LPAREN    [reduce using rule 43 (expr)]
    LBRACKET  [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


state 82

   64 defineIden: idenFunc .

    $default  reduce using rule 64 (defineIden)


state 83

   74 ifPart: IF LPAREN . expr RPAREN @6 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 131
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 84

   54 defineFor: FOR LPAREN . paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 107 (paramList)]
    $default  reduce using rule 107 (paramList)

    endls        go to state 132
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 133
    paramList    go to state 134
    defineType   go to state 26


state 85

  157 defineWhile: WHILE LPAREN . expr RPAREN @12 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 135
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 86

  135 defineSwitch: SWITCH LPAREN . expr RPAREN @9 switchSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 136
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 87

  126 stat: defineFor endc .

    $default  reduce using rule 126 (stat)


state 88

   89 assignment: defineIden ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 137
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 89

   66 idenFunc: defineIden LPAREN . exprList RPAREN
   67         | defineIden LPAREN . RPAREN

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 2
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 138
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 114
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 115
    exprList     go to state 139
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 90

   68 idenBracket: defineIden LBRACKET . expr RBRACKET

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 140
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 91

  124 stat: defineIf endc .

    $default  reduce using rule 124 (stat)


state 92

   78 elseIfPart: ELSE . IF LPAREN expr RPAREN @7 subSpace
   80 elsePart: ELSE . @8 subSpace

    IF  shift, and go to state 141

    $default  reduce using rule 79 (@8)

    @8  go to state 142


state 93

   70 defineIf: ifPart elseIfParts .
   72         | ifPart elseIfParts . elsePart
   75 elseIfParts: elseIfParts . elseIfPart

    ELSE  shift, and go to state 92

    $default  reduce using rule 70 (defineIf)

    elseIfPart  go to state 143
    elsePart    go to state 144


state 94

   76 elseIfParts: elseIfPart .

    $default  reduce using rule 76 (elseIfParts)


state 95

   71 defineIf: ifPart elsePart .

    $default  reduce using rule 71 (defineIf)


state 96

  122 stat: iteration endc .

    $default  reduce using rule 122 (stat)


state 97

  123 stat: controlSpace endc .

    $default  reduce using rule 123 (stat)


state 98

  121 stat: endc .

    $default  reduce using rule 121 (stat)


state 99

  119 stats: stats stat .

    $default  reduce using rule 119 (stats)


state 100

  127 stat: defineSwitch endc .

    $default  reduce using rule 127 (stat)


state 101

  125 stat: defineWhile endc .

    $default  reduce using rule 125 (stat)


state 102

   62 funcType: defineType COLON LPAREN . typeList RPAREN

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    $default  reduce using rule 152 (typeList)

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 145
    typeListP   go to state 146
    typeList    go to state 147


state 103

  104 defineParam: defineType name ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 148
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 104

   59 funcHeaderV: LPAREN . paramList RPAREN

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 107 (paramList)]
    $default  reduce using rule 107 (paramList)

    endls        go to state 132
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 133
    paramList    go to state 149
    defineType   go to state 26


state 105

   56 defineFunc: defineType name funcHeaderV . @3 subSpace

    $default  reduce using rule 55 (@3)

    @3  go to state 150


state 106

   83 initOperator: OPERATOR RBRACE . initOperatorContexts LBRACE endls

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls                 go to state 151
    name                  go to state 9
    arrayType             go to state 11
    dictType              go to state 12
    funcType              go to state 14
    initOperatorContexts  go to state 152
    initOperatorContext   go to state 153
    defineType            go to state 154


state 107

   81 init: DINIT endls initContext DEND .

    $default  reduce using rule 81 (init)


state 108

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   37     | RPAREN expr . LPAREN

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    LPAREN   shift, and go to state 155


state 109

   61 funcHeaderE: LPAREN @5 . paramList RPAREN COLON defineType

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 107 (paramList)]
    $default  reduce using rule 107 (paramList)

    endls        go to state 132
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 133
    paramList    go to state 156
    defineType   go to state 26


state 110

    1 endls: endls . ENDL
   21 dictContext: endls . dictContext

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 157

    NAME      [reduce using rule 18 (dictContext)]
    ENDL      [reduce using rule 18 (dictContext)]
    $default  reduce using rule 18 (dictContext)

    endls        go to state 110
    name         go to state 111
    dictContext  go to state 158
    dictList     go to state 113


state 111

   23 dictList: name . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 159
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 112

   17 dictExpr: LBRACE dictContext . RBRACE
   19 dictContext: dictContext . lists dictList
   22            | dictContext . endls

    ENDL    shift, and go to state 2
    RBRACE  shift, and go to state 160
    COMMA   shift, and go to state 30

    $default  reduce using rule 7 (lists)

    endls  go to state 161
    list   go to state 162
    lists  go to state 163


state 113

   20 dictContext: dictList .

    $default  reduce using rule 20 (dictContext)


state 114

    1 endls: endls . ENDL
   50 exprList: endls . exprList

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 157
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 114
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 115
    exprList     go to state 164
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 115

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   49 exprList: expr .

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 49 (exprList)


state 116

   15 arrayExpr: LBRACKET exprList . RBRACKET
   48 exprList: exprList . lists expr
   51         | exprList . endls

    ENDL      shift, and go to state 2
    COMMA     shift, and go to state 30
    RBRACKET  shift, and go to state 165

    $default  reduce using rule 7 (lists)

    endls  go to state 166
    list   go to state 162
    lists  go to state 167


state 117

   25 expr: expr OR . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 168
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 118

   24 expr: expr AND . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 169
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 119

   27 expr: expr NE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 170
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 120

   26 expr: expr EQ . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 171
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 121

   29 expr: expr GE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 172
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 122

   28 expr: expr GT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 173
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 123

   31 expr: expr LE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 174
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 124

   30 expr: expr LT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 175
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 125

   33 expr: expr MINUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 176
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 126

   32 expr: expr PLUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 177
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 127

   36 expr: expr MODULUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 178
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 128

   35 expr: expr DIVIDE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 179
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 129

   34 expr: expr MULT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 180
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 130

   58 funcExpr: funcHeaderE @4 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 183


state 131

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   74 ifPart: IF LPAREN expr . RPAREN @6 subSpace

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    RPAREN   shift, and go to state 184


state 132

    1 endls: endls . ENDL
  109 paramList: endls . paramList

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 157
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 107 (paramList)]
    $default  reduce using rule 107 (paramList)

    endls        go to state 132
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 133
    paramList    go to state 185
    defineType   go to state 26


state 133

  105 paramListP: paramListP . list defineParam
  108 paramList: paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 108 (paramList)

    list  go to state 31


state 134

   54 defineFor: FOR LPAREN paramList . @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace
  110 paramList: paramList . endls

    ENDL  shift, and go to state 2

    $default  reduce using rule 52 (@1)

    endls  go to state 186
    @1     go to state 187


state 135

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  157 defineWhile: WHILE LPAREN expr . RPAREN @12 subSpace

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    RPAREN   shift, and go to state 188


state 136

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  135 defineSwitch: SWITCH LPAREN expr . RPAREN @9 switchSpace

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    RPAREN   shift, and go to state 189


state 137

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   89 assignment: defineIden ASSIGN expr .

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 89 (assignment)


state 138

   37 expr: RPAREN . expr LPAREN
   67 idenFunc: defineIden LPAREN RPAREN .

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 67 (idenFunc)]
    INT            [reduce using rule 67 (idenFunc)]
    NUMBER         [reduce using rule 67 (idenFunc)]
    STRING         [reduce using rule 67 (idenFunc)]
    VALUE_BOOLEAN  [reduce using rule 67 (idenFunc)]
    VALUE_VOID     [reduce using rule 67 (idenFunc)]
    RPAREN         [reduce using rule 67 (idenFunc)]
    LPAREN         [reduce using rule 67 (idenFunc)]
    LBRACE         [reduce using rule 67 (idenFunc)]
    LBRACKET       [reduce using rule 67 (idenFunc)]
    $default       reduce using rule 67 (idenFunc)

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 108
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 139

   48 exprList: exprList . lists expr
   51         | exprList . endls
   66 idenFunc: defineIden LPAREN exprList . RPAREN

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 190
    COMMA   shift, and go to state 30

    RPAREN    [reduce using rule 7 (lists)]
    $default  reduce using rule 7 (lists)

    endls  go to state 166
    list   go to state 162
    lists  go to state 167


state 140

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   68 idenBracket: defineIden LBRACKET expr . RBRACKET

    OR        shift, and go to state 117
    AND       shift, and go to state 118
    NE        shift, and go to state 119
    EQ        shift, and go to state 120
    GE        shift, and go to state 121
    GT        shift, and go to state 122
    LE        shift, and go to state 123
    LT        shift, and go to state 124
    MINUS     shift, and go to state 125
    PLUS      shift, and go to state 126
    MODULUS   shift, and go to state 127
    DIVIDE    shift, and go to state 128
    MULT      shift, and go to state 129
    RBRACKET  shift, and go to state 191


state 141

   78 elseIfPart: ELSE IF . LPAREN expr RPAREN @7 subSpace

    LPAREN  shift, and go to state 192


state 142

   80 elsePart: ELSE @8 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 193


state 143

   75 elseIfParts: elseIfParts elseIfPart .

    $default  reduce using rule 75 (elseIfParts)


state 144

   72 defineIf: ifPart elseIfParts elsePart .

    $default  reduce using rule 72 (defineIf)


state 145

   14 arrayType: defineType . BRACKET
   62 funcType: defineType . COLON LPAREN typeList RPAREN
  151 typeListP: defineType .

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 151 (typeListP)


state 146

  150 typeListP: typeListP . list defineType
  153 typeList: typeListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 153 (typeList)

    list  go to state 194


state 147

   62 funcType: defineType COLON LPAREN typeList . RPAREN

    RPAREN  shift, and go to state 195


state 148

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  104 defineParam: defineType name ASSIGN expr .

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 104 (defineParam)


state 149

   59 funcHeaderV: LPAREN paramList . RPAREN
  110 paramList: paramList . endls

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 196

    endls  go to state 186


state 150

   56 defineFunc: defineType name funcHeaderV @3 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 197


state 151

    1 endls: endls . ENDL
   86 initOperatorContext: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 86 (initOperatorContext)]
    $default  reduce using rule 86 (initOperatorContext)


state 152

   83 initOperator: OPERATOR RBRACE initOperatorContexts . LBRACE endls
   84 initOperatorContexts: initOperatorContexts . initOperatorContext

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 198

    endls                go to state 151
    name                 go to state 9
    arrayType            go to state 11
    dictType             go to state 12
    funcType             go to state 14
    initOperatorContext  go to state 199
    defineType           go to state 154


state 153

   85 initOperatorContexts: initOperatorContext .

    $default  reduce using rule 85 (initOperatorContexts)


state 154

   14 arrayType: defineType . BRACKET
   62 funcType: defineType . COLON LPAREN typeList RPAREN
   87 initOperatorContext: defineType . operator defineType ASSIGN name endls

    NE       shift, and go to state 200
    EQ       shift, and go to state 201
    GE       shift, and go to state 202
    GT       shift, and go to state 203
    LE       shift, and go to state 204
    LT       shift, and go to state 205
    MINUS    shift, and go to state 206
    PLUS     shift, and go to state 207
    MODULUS  shift, and go to state 208
    DIVIDE   shift, and go to state 209
    MULT     shift, and go to state 210
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    operator  go to state 211


state 155

   37 expr: RPAREN expr LPAREN .

    $default  reduce using rule 37 (expr)


state 156

   61 funcHeaderE: LPAREN @5 paramList . RPAREN COLON defineType
  110 paramList: paramList . endls

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 212

    endls  go to state 186


state 157

    1 endls: endls ENDL .
    2      | ENDL .

    NAME           reduce using rule 1 (endls)
    NAME           [reduce using rule 2 (endls)]
    ENDL           reduce using rule 1 (endls)
    ENDL           [reduce using rule 2 (endls)]
    INT            reduce using rule 1 (endls)
    INT            [reduce using rule 2 (endls)]
    NUMBER         reduce using rule 1 (endls)
    NUMBER         [reduce using rule 2 (endls)]
    STRING         reduce using rule 1 (endls)
    STRING         [reduce using rule 2 (endls)]
    VALUE_BOOLEAN  reduce using rule 1 (endls)
    VALUE_BOOLEAN  [reduce using rule 2 (endls)]
    VALUE_VOID     reduce using rule 1 (endls)
    VALUE_VOID     [reduce using rule 2 (endls)]
    SEMICOLON      reduce using rule 1 (endls)
    SEMICOLON      [reduce using rule 2 (endls)]
    RPAREN         reduce using rule 1 (endls)
    RPAREN         [reduce using rule 2 (endls)]
    LPAREN         reduce using rule 1 (endls)
    LPAREN         [reduce using rule 2 (endls)]
    RBRACE         reduce using rule 1 (endls)
    RBRACE         [reduce using rule 2 (endls)]
    LBRACE         reduce using rule 1 (endls)
    LBRACE         [reduce using rule 2 (endls)]
    COMMA          reduce using rule 1 (endls)
    COMMA          [reduce using rule 2 (endls)]
    RBRACKET       reduce using rule 1 (endls)
    RBRACKET       [reduce using rule 2 (endls)]
    LBRACKET       reduce using rule 1 (endls)
    LBRACKET       [reduce using rule 2 (endls)]
    $default       reduce using rule 1 (endls)


state 158

   19 dictContext: dictContext . lists dictList
   21            | endls dictContext .
   22            | dictContext . endls

    ENDL   shift, and go to state 2
    COMMA  shift, and go to state 30

    NAME      reduce using rule 7 (lists)
    NAME      [reduce using rule 21 (dictContext)]
    ENDL      [reduce using rule 21 (dictContext)]
    RBRACE    reduce using rule 21 (dictContext)
    COMMA     [reduce using rule 21 (dictContext)]
    $default  reduce using rule 7 (lists)

    endls  go to state 161
    list   go to state 162
    lists  go to state 163


state 159

   23 dictList: name expr .
   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 23 (dictList)


state 160

   17 dictExpr: LBRACE dictContext RBRACE .

    $default  reduce using rule 17 (dictExpr)


state 161

    1 endls: endls . ENDL
    9 lists: endls .
   22 dictContext: dictContext endls .

    ENDL  shift, and go to state 27

    NAME      reduce using rule 9 (lists)
    NAME      [reduce using rule 22 (dictContext)]
    ENDL      [reduce using rule 22 (dictContext)]
    $default  reduce using rule 22 (dictContext)


state 162

    6 list: list . endls
    8 lists: list .

    ENDL  shift, and go to state 2

    $default  reduce using rule 8 (lists)

    endls  go to state 64


state 163

   19 dictContext: dictContext lists . dictList

    NAME  shift, and go to state 1

    name      go to state 111
    dictList  go to state 213


state 164

   48 exprList: exprList . lists expr
   50         | endls exprList .
   51         | exprList . endls

    ENDL   shift, and go to state 2
    COMMA  shift, and go to state 30

    NAME           reduce using rule 7 (lists)
    NAME           [reduce using rule 50 (exprList)]
    ENDL           [reduce using rule 50 (exprList)]
    INT            reduce using rule 7 (lists)
    INT            [reduce using rule 50 (exprList)]
    NUMBER         reduce using rule 7 (lists)
    NUMBER         [reduce using rule 50 (exprList)]
    STRING         reduce using rule 7 (lists)
    STRING         [reduce using rule 50 (exprList)]
    VALUE_BOOLEAN  reduce using rule 7 (lists)
    VALUE_BOOLEAN  [reduce using rule 50 (exprList)]
    VALUE_VOID     reduce using rule 7 (lists)
    VALUE_VOID     [reduce using rule 50 (exprList)]
    RPAREN         reduce using rule 7 (lists)
    RPAREN         [reduce using rule 50 (exprList)]
    LPAREN         reduce using rule 7 (lists)
    LPAREN         [reduce using rule 50 (exprList)]
    LBRACE         reduce using rule 7 (lists)
    LBRACE         [reduce using rule 50 (exprList)]
    COMMA          [reduce using rule 50 (exprList)]
    RBRACKET       reduce using rule 50 (exprList)
    LBRACKET       reduce using rule 7 (lists)
    LBRACKET       [reduce using rule 50 (exprList)]
    $default       reduce using rule 7 (lists)

    endls  go to state 166
    list   go to state 162
    lists  go to state 167


state 165

   15 arrayExpr: LBRACKET exprList RBRACKET .

    $default  reduce using rule 15 (arrayExpr)


state 166

    1 endls: endls . ENDL
    9 lists: endls .
   51 exprList: exprList endls .

    ENDL  shift, and go to state 27

    NAME           reduce using rule 9 (lists)
    NAME           [reduce using rule 51 (exprList)]
    ENDL           [reduce using rule 51 (exprList)]
    INT            reduce using rule 9 (lists)
    INT            [reduce using rule 51 (exprList)]
    NUMBER         reduce using rule 9 (lists)
    NUMBER         [reduce using rule 51 (exprList)]
    STRING         reduce using rule 9 (lists)
    STRING         [reduce using rule 51 (exprList)]
    VALUE_BOOLEAN  reduce using rule 9 (lists)
    VALUE_BOOLEAN  [reduce using rule 51 (exprList)]
    VALUE_VOID     reduce using rule 9 (lists)
    VALUE_VOID     [reduce using rule 51 (exprList)]
    RPAREN         reduce using rule 9 (lists)
    RPAREN         [reduce using rule 51 (exprList)]
    LPAREN         reduce using rule 9 (lists)
    LPAREN         [reduce using rule 51 (exprList)]
    LBRACE         reduce using rule 9 (lists)
    LBRACE         [reduce using rule 51 (exprList)]
    COMMA          reduce using rule 51 (exprList)
    RBRACKET       reduce using rule 51 (exprList)
    LBRACKET       reduce using rule 9 (lists)
    LBRACKET       [reduce using rule 51 (exprList)]
    $default       reduce using rule 9 (lists)


state 167

   48 exprList: exprList lists . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 214
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 168

   24 expr: expr . AND expr
   25     | expr . OR expr
   25     | expr OR expr .
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 25 (expr)


state 169

   24 expr: expr . AND expr
   24     | expr AND expr .
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 24 (expr)


state 170

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   27     | expr NE expr .
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 27 (expr)


state 171

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   26     | expr EQ expr .
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 26 (expr)


state 172

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   29     | expr GE expr .
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 29 (expr)


state 173

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   28     | expr GT expr .
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 28 (expr)


state 174

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   31     | expr LE expr .
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 31 (expr)


state 175

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   30     | expr LT expr .
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 30 (expr)


state 176

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   33     | expr MINUS expr .
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 33 (expr)


state 177

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   32     | expr PLUS expr .
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 32 (expr)


state 178

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   36     | expr MODULUS expr .

    $default  reduce using rule 36 (expr)


state 179

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   35     | expr DIVIDE expr .
   36     | expr . MODULUS expr

    $default  reduce using rule 35 (expr)


state 180

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   34     | expr MULT expr .
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    $default  reduce using rule 34 (expr)


state 181

  111 subSpace: LBRACE . space RBRACE

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    CONST      shift, and go to state 6

    NAME       [reduce using rule 128 (defineStats)]
    ENDL       [reduce using rule 128 (defineStats)]
    SEMICOLON  [reduce using rule 128 (defineStats)]
    LBRACE     [reduce using rule 128 (defineStats)]
    CONST      [reduce using rule 128 (defineStats)]
    $default   reduce using rule 128 (defineStats)

    endls          go to state 7
    endc           go to state 8
    name           go to state 9
    arrayType      go to state 11
    dictType       go to state 12
    defineFunc     go to state 13
    funcType       go to state 14
    defineParam    go to state 16
    paramListP     go to state 17
    space          go to state 215
    defineStats    go to state 19
    defineStat     go to state 20
    defineType     go to state 21
    defineVariale  go to state 22


state 182

    1 endls: endls . ENDL
  112 subSpace: endls . subSpace

    ENDL    shift, and go to state 157
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 216


state 183

   58 funcExpr: funcHeaderE @4 subSpace .

    $default  reduce using rule 58 (funcExpr)


state 184

   74 ifPart: IF LPAREN expr RPAREN . @6 subSpace

    $default  reduce using rule 73 (@6)

    @6  go to state 217


state 185

  109 paramList: endls paramList .
  110          | paramList . endls

    ENDL  shift, and go to state 2

    ENDL      [reduce using rule 109 (paramList)]
    $default  reduce using rule 109 (paramList)

    endls  go to state 186


state 186

    1 endls: endls . ENDL
  110 paramList: paramList endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 110 (paramList)]
    $default  reduce using rule 110 (paramList)


state 187

   54 defineFor: FOR LPAREN paramList @1 . SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    SEMICOLON  shift, and go to state 218


state 188

  157 defineWhile: WHILE LPAREN expr RPAREN . @12 subSpace

    $default  reduce using rule 156 (@12)

    @12  go to state 219


state 189

  135 defineSwitch: SWITCH LPAREN expr RPAREN . @9 switchSpace

    $default  reduce using rule 134 (@9)

    @9  go to state 220


state 190

   66 idenFunc: defineIden LPAREN exprList RPAREN .

    $default  reduce using rule 66 (idenFunc)


state 191

   68 idenBracket: defineIden LBRACKET expr RBRACKET .

    $default  reduce using rule 68 (idenBracket)


state 192

   78 elseIfPart: ELSE IF LPAREN . expr RPAREN @7 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 221
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 193

   80 elsePart: ELSE @8 subSpace .

    $default  reduce using rule 80 (elsePart)


state 194

    6 list: list . endls
  150 typeListP: typeListP list . defineType

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls       go to state 64
    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 222


state 195

   62 funcType: defineType COLON LPAREN typeList RPAREN .

    $default  reduce using rule 62 (funcType)


state 196

   59 funcHeaderV: LPAREN paramList RPAREN .

    $default  reduce using rule 59 (funcHeaderV)


state 197

   56 defineFunc: defineType name funcHeaderV @3 subSpace .

    $default  reduce using rule 56 (defineFunc)


state 198

   16 dictType: LBRACE . defineType RBRACE
   83 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE . endls

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls       go to state 223
    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 23


state 199

   84 initOperatorContexts: initOperatorContexts initOperatorContext .

    $default  reduce using rule 84 (initOperatorContexts)


state 200

   98 operator: NE .

    $default  reduce using rule 98 (operator)


state 201

   97 operator: EQ .

    $default  reduce using rule 97 (operator)


state 202

  100 operator: GE .

    $default  reduce using rule 100 (operator)


state 203

   99 operator: GT .

    $default  reduce using rule 99 (operator)


state 204

  102 operator: LE .

    $default  reduce using rule 102 (operator)


state 205

  101 operator: LT .

    $default  reduce using rule 101 (operator)


state 206

   93 operator: MINUS .

    $default  reduce using rule 93 (operator)


state 207

   92 operator: PLUS .

    $default  reduce using rule 92 (operator)


state 208

   96 operator: MODULUS .

    $default  reduce using rule 96 (operator)


state 209

   95 operator: DIVIDE .

    $default  reduce using rule 95 (operator)


state 210

   94 operator: MULT .

    $default  reduce using rule 94 (operator)


state 211

   87 initOperatorContext: defineType operator . defineType ASSIGN name endls

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 224


state 212

   61 funcHeaderE: LPAREN @5 paramList RPAREN . COLON defineType

    COLON  shift, and go to state 225


state 213

   19 dictContext: dictContext lists dictList .

    $default  reduce using rule 19 (dictContext)


state 214

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   48 exprList: exprList lists expr .

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129

    $default  reduce using rule 48 (exprList)


state 215

  111 subSpace: LBRACE space . RBRACE

    RBRACE  shift, and go to state 226


state 216

  112 subSpace: endls subSpace .

    $default  reduce using rule 112 (subSpace)


state 217

   74 ifPart: IF LPAREN expr RPAREN @6 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 227


state 218

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON . expr SEMICOLON iteration RPAREN @2 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 228
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 219

  157 defineWhile: WHILE LPAREN expr RPAREN @12 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 229


state 220

  135 defineSwitch: SWITCH LPAREN expr RPAREN @9 . switchSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 230

    endls        go to state 231
    switchSpace  go to state 232


state 221

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   78 elseIfPart: ELSE IF LPAREN expr . RPAREN @7 subSpace

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    RPAREN   shift, and go to state 233


state 222

   14 arrayType: defineType . BRACKET
   62 funcType: defineType . COLON LPAREN typeList RPAREN
  150 typeListP: typeListP list defineType .

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 150 (typeListP)


state 223

    1 endls: endls . ENDL
   83 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE endls .

    ENDL  shift, and go to state 27

    $default  reduce using rule 83 (initOperator)


state 224

   14 arrayType: defineType . BRACKET
   62 funcType: defineType . COLON LPAREN typeList RPAREN
   87 initOperatorContext: defineType operator defineType . ASSIGN name endls

    COLON    shift, and go to state 55
    ASSIGN   shift, and go to state 234
    BRACKET  shift, and go to state 56


state 225

   61 funcHeaderE: LPAREN @5 paramList RPAREN COLON . defineType

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 235


state 226

  111 subSpace: LBRACE space RBRACE .

    $default  reduce using rule 111 (subSpace)


state 227

   74 ifPart: IF LPAREN expr RPAREN @6 subSpace .

    $default  reduce using rule 74 (ifPart)


state 228

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr . SEMICOLON iteration RPAREN @2 subSpace

    OR         shift, and go to state 117
    AND        shift, and go to state 118
    NE         shift, and go to state 119
    EQ         shift, and go to state 120
    GE         shift, and go to state 121
    GT         shift, and go to state 122
    LE         shift, and go to state 123
    LT         shift, and go to state 124
    MINUS      shift, and go to state 125
    PLUS       shift, and go to state 126
    MODULUS    shift, and go to state 127
    DIVIDE     shift, and go to state 128
    MULT       shift, and go to state 129
    SEMICOLON  shift, and go to state 236


state 229

  157 defineWhile: WHILE LPAREN expr RPAREN @12 subSpace .

    $default  reduce using rule 157 (defineWhile)


state 230

  136 switchSpace: LBRACE . switchStats RBRACE

    ENDL     shift, and go to state 2
    CASE     shift, and go to state 237
    DEFAULT  shift, and go to state 238

    ENDL      [reduce using rule 140 (switchStat)]
    CASE      [reduce using rule 140 (switchStat)]
    DEFAULT   [reduce using rule 140 (switchStat)]
    $default  reduce using rule 140 (switchStat)

    endls        go to state 239
    switchStats  go to state 240
    switchStat   go to state 241


state 231

    1 endls: endls . ENDL
  137 switchSpace: endls . switchSpace

    ENDL    shift, and go to state 157
    LBRACE  shift, and go to state 230

    endls        go to state 231
    switchSpace  go to state 242


state 232

  135 defineSwitch: SWITCH LPAREN expr RPAREN @9 switchSpace .

    $default  reduce using rule 135 (defineSwitch)


state 233

   78 elseIfPart: ELSE IF LPAREN expr RPAREN . @7 subSpace

    $default  reduce using rule 77 (@7)

    @7  go to state 243


state 234

   87 initOperatorContext: defineType operator defineType ASSIGN . name endls

    NAME  shift, and go to state 1

    name  go to state 244


state 235

   14 arrayType: defineType . BRACKET
   61 funcHeaderE: LPAREN @5 paramList RPAREN COLON defineType .
   62 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 61 (funcHeaderE)


state 236

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON . iteration RPAREN @2 subSpace

    NAME  shift, and go to state 1

    $default  reduce using rule 88 (assignment)

    name         go to state 75
    defineIden   go to state 42
    idenFunc     go to state 43
    idenBracket  go to state 44
    assignment   go to state 47
    iteration    go to state 245


state 237

  143 switchStat: CASE . LPAREN expr RPAREN @10 subSpace

    LPAREN  shift, and go to state 246


state 238

  145 switchStat: DEFAULT . @11 subSpace

    $default  reduce using rule 144 (@11)

    @11  go to state 247


state 239

    1 endls: endls . ENDL
  141 switchStat: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 141 (switchStat)]
    $default  reduce using rule 141 (switchStat)


state 240

  136 switchSpace: LBRACE switchStats . RBRACE
  138 switchStats: switchStats . switchStat

    ENDL     shift, and go to state 2
    RBRACE   shift, and go to state 248
    CASE     shift, and go to state 237
    DEFAULT  shift, and go to state 238

    ENDL     [reduce using rule 140 (switchStat)]
    RBRACE   [reduce using rule 140 (switchStat)]
    CASE     [reduce using rule 140 (switchStat)]
    DEFAULT  [reduce using rule 140 (switchStat)]

    endls       go to state 239
    switchStat  go to state 249


state 241

  139 switchStats: switchStat .

    $default  reduce using rule 139 (switchStats)


state 242

  137 switchSpace: endls switchSpace .

    $default  reduce using rule 137 (switchSpace)


state 243

   78 elseIfPart: ELSE IF LPAREN expr RPAREN @7 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 250


state 244

   87 initOperatorContext: defineType operator defineType ASSIGN name . endls

    ENDL  shift, and go to state 2

    endls  go to state 251


state 245

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration . RPAREN @2 subSpace

    RPAREN  shift, and go to state 252


state 246

  143 switchStat: CASE LPAREN . expr RPAREN @10 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 253
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 247

  145 switchStat: DEFAULT @11 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 254


state 248

  136 switchSpace: LBRACE switchStats RBRACE .

    $default  reduce using rule 136 (switchSpace)


state 249

  138 switchStats: switchStats switchStat .

    $default  reduce using rule 138 (switchStats)


state 250

   78 elseIfPart: ELSE IF LPAREN expr RPAREN @7 subSpace .

    $default  reduce using rule 78 (elseIfPart)


state 251

    1 endls: endls . ENDL
   87 initOperatorContext: defineType operator defineType ASSIGN name endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 87 (initOperatorContext)]
    $default  reduce using rule 87 (initOperatorContext)


state 252

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN . @2 subSpace

    $default  reduce using rule 53 (@2)

    @2  go to state 255


state 253

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  143 switchStat: CASE LPAREN expr . RPAREN @10 subSpace

    OR       shift, and go to state 117
    AND      shift, and go to state 118
    NE       shift, and go to state 119
    EQ       shift, and go to state 120
    GE       shift, and go to state 121
    GT       shift, and go to state 122
    LE       shift, and go to state 123
    LT       shift, and go to state 124
    MINUS    shift, and go to state 125
    PLUS     shift, and go to state 126
    MODULUS  shift, and go to state 127
    DIVIDE   shift, and go to state 128
    MULT     shift, and go to state 129
    RPAREN   shift, and go to state 256


state 254

  145 switchStat: DEFAULT @11 subSpace .

    $default  reduce using rule 145 (switchStat)


state 255

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 257


state 256

  143 switchStat: CASE LPAREN expr RPAREN . @10 subSpace

    $default  reduce using rule 142 (@10)

    @10  go to state 258


state 257

   54 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace .

    $default  reduce using rule 54 (defineFor)


state 258

  143 switchStat: CASE LPAREN expr RPAREN @10 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 181

    endls     go to state 182
    subSpace  go to state 259


state 259

  143 switchStat: CASE LPAREN expr RPAREN @10 subSpace .

    $default  reduce using rule 143 (switchStat)
