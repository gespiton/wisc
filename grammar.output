Terminals which are not used

   EPLUS
   DPLUS
   EMINUS
   DMINUS
   EMULT
   EDIVIDE
   EMODULUS
   OPPOSITE


State 0 conflicts: 5 shift/reduce, 1 reduce/reduce
State 7 conflicts: 1 shift/reduce
State 19 conflicts: 10 shift/reduce
State 39 conflicts: 12 reduce/reduce
State 64 conflicts: 1 shift/reduce
State 73 conflicts: 2 shift/reduce
State 74 conflicts: 11 shift/reduce
State 81 conflicts: 2 shift/reduce
State 84 conflicts: 1 shift/reduce
State 89 conflicts: 11 shift/reduce
State 105 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 111 conflicts: 2 shift/reduce
State 115 conflicts: 11 shift/reduce
State 133 conflicts: 1 shift/reduce
State 139 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 158 conflicts: 15 reduce/reduce
State 159 conflicts: 2 shift/reduce, 1 reduce/reduce
State 162 conflicts: 1 shift/reduce, 1 reduce/reduce
State 165 conflicts: 2 shift/reduce, 10 reduce/reduce
State 167 conflicts: 1 shift/reduce, 10 reduce/reduce
State 182 conflicts: 5 shift/reduce
State 186 conflicts: 1 shift/reduce
State 187 conflicts: 1 shift/reduce
State 231 conflicts: 3 shift/reduce
State 240 conflicts: 1 shift/reduce
State 241 conflicts: 4 shift/reduce
State 252 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 endls: endls ENDL
    2      | ENDL

    3 endc: SEMICOLON
    4     | endls

    5 list: COMMA
    6     | list endls

    7 lists: /* empty */
    8      | list
    9      | endls

   10 name: NAME

   11 program: /* empty */
   12        | init
   13        | space

   14 arrayType: defineType BRACKET

   15 arrayExpr: LBRACKET exprList RBRACKET

   16 dictType: LBRACE defineType RBRACE

   17 dictExpr: LBRACE dictContext RBRACE

   18 dictContext: /* empty */
   19            | dictContext lists dictList
   20            | dictList
   21            | endls dictContext
   22            | dictContext endls

   23 dictList: name expr

   24 expr: expr AND expr
   25     | expr OR expr
   26     | expr EQ expr
   27     | expr NE expr
   28     | expr GT expr
   29     | expr GE expr
   30     | expr LT expr
   31     | expr LE expr
   32     | expr PLUS expr
   33     | expr MINUS expr
   34     | expr MULT expr
   35     | expr DIVIDE expr
   36     | expr MODULUS expr
   37     | RPAREN expr LPAREN
   38     | STRING
   39     | VALUE_VOID
   40     | VALUE_BOOLEAN
   41     | INT
   42     | NUMBER
   43     | defineIden
   44     | funcExpr
   45     | arrayExpr
   46     | dictExpr

   47 exprList: /* empty */
   48         | exprList lists expr
   49         | expr
   50         | endls exprList
   51         | exprList endls

   52 @1: /* empty */

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN subSpace

   54 @2: /* empty */

   55 defineFunc: defineType name funcHeaderV @2 subSpace

   56 @3: /* empty */

   57 funcExpr: funcHeaderE @3 subSpace

   58 funcHeaderV: LPAREN paramList RPAREN

   59 @4: /* empty */

   60 funcHeaderE: LPAREN @4 paramList RPAREN COLON defineType

   61 funcType: defineType COLON LPAREN typeList RPAREN

   62 defineIden: name
   63           | idenFunc
   64           | idenBracket

   65 idenFunc: defineIden LPAREN exprList RPAREN

   66 idenBracket: defineIden LBRACKET expr RBRACKET

   67 defineIf: ifPart
   68         | ifPart elseIfParts
   69         | ifPart elsePart
   70         | ifPart elseIfParts elsePart

   71 @5: /* empty */

   72 ifPart: IF LPAREN expr RPAREN @5 subSpace

   73 elseIfParts: elseIfParts elseIfPart
   74            | elseIfPart

   75 @6: /* empty */

   76 elseIfPart: ELSE IF LPAREN expr RPAREN @6 subSpace

   77 @7: /* empty */

   78 elsePart: ELSE @7 subSpace

   79 init: DINIT endls initContext DEND endls

   80 initContext: initOperator

   81 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE endls

   82 initOperatorContexts: initOperatorContexts initOperatorContext
   83                     | initOperatorContext

   84 initOperatorContext: endls
   85                    | defineType operator defineType ASSIGN name endls

   86 assignment: defineIden ASSIGN expr

   87 iteration: assignment

   88 operator: PLUS
   89         | MINUS
   90         | MULT
   91         | DIVIDE
   92         | MODULUS
   93         | EQ
   94         | NE
   95         | GT
   96         | GE
   97         | LT
   98         | LE

   99 defineParam: defineType name
  100            | defineType name ASSIGN expr

  101 paramListP: paramListP list defineParam
  102           | defineParam

  103 paramList: /* empty */
  104          | paramListP
  105          | endls paramList
  106          | paramList endls

  107 subSpace: LBRACE space RBRACE
  108         | endls subSpace

  109 space: defineStats stats

  110 controlSpace: RETURN expr
  111             | RETURN
  112             | BREAK
  113             | CONTINUE

  114 stats: /* empty */
  115      | stats stat
  116      | stat

  117 stat: endc
  118     | iteration endc
  119     | controlSpace endc
  120     | idenFunc endc
  121     | defineIf endc
  122     | defineWhile endc
  123     | defineFor endc
  124     | defineSwitch endc

  125 defineStats: /* empty */
  126            | defineStats defineStat
  127            | defineStat

  128 defineStat: endc
  129           | defineFunc endc
  130           | defineVariale endc

  131 @8: /* empty */

  132 defineSwitch: SWITCH LPAREN expr RPAREN @8 switchSpace

  133 switchSpace: RBRACE switchStats LBRACE
  134            | endls switchSpace

  135 switchStats: switchStats switchStat
  136            | switchStat

  137 switchStat: /* empty */
  138           | endls

  139 @9: /* empty */

  140 switchStat: CASE LPAREN expr RPAREN @9 subSpace

  141 @10: /* empty */

  142 switchStat: DEFAULT @10 subSpace

  143 defineType: name
  144           | funcType
  145           | arrayType
  146           | dictType

  147 typeListP: typeListP list defineType
  148          | defineType

  149 typeList: /* empty */
  150         | typeListP

  151 defineVariale: paramListP
  152              | CONST paramListP

  153 @11: /* empty */

  154 defineWhile: WHILE LPAREN expr RPAREN @11 subSpace


Terminals, with rules where they appear

$end (0) 0
error (256)
OR (258) 25
AND (259) 24
NE (260) 27 94
EQ (261) 26 93
GE (262) 29 96
GT (263) 28 95
LE (264) 31 98
LT (265) 30 97
MINUS (266) 33 89
PLUS (267) 32 88
MODULUS (268) 36 92
DIVIDE (269) 35 91
MULT (270) 34 90
NAME (271) 10
ENDL (272) 1 2
INT (273) 41
NUMBER (274) 42
STRING (275) 38
VALUE_BOOLEAN (276) 40
VALUE_VOID (277) 39
SEMICOLON (278) 3 53
COLON (279) 60 61
ASSIGN (280) 85 86 100
RPAREN (281) 37 53 58 60 61 65 72 76 132 140 154
LPAREN (282) 37 53 58 60 61 65 72 76 132 140 154
RBRACE (283) 16 17 81 107 133
LBRACE (284) 16 17 81 107 133
COMMA (285) 5
BRACKET (286) 14
RBRACKET (287) 15 66
LBRACKET (288) 15 66
DINIT (289) 79
DEND (290) 79
RETURN (291) 110 111
IF (292) 72 76
ELSE (293) 76 78
FOR (294) 53
WHILE (295) 154
SWITCH (296) 132
CASE (297) 140
DEFAULT (298) 142
BREAK (299) 112
CONTINUE (300) 113
OPERATOR (301) 81
CONST (302) 152
EPLUS (303)
DPLUS (304)
EMINUS (305)
DMINUS (306)
EMULT (307)
EDIVIDE (308)
EMODULUS (309)
OPPOSITE (310)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
endls (57)
    on left: 1 2, on right: 1 4 6 9 21 22 50 51 79 81 84 85 105 106
    108 134 138
endc (58)
    on left: 3 4, on right: 117 118 119 120 121 122 123 124 128 129
    130
list (59)
    on left: 5 6, on right: 6 8 101 147
lists (60)
    on left: 7 8 9, on right: 19 48
name (61)
    on left: 10, on right: 23 55 62 85 99 100 143
program (62)
    on left: 11 12 13, on right: 0
arrayType (63)
    on left: 14, on right: 145
arrayExpr (64)
    on left: 15, on right: 45
dictType (65)
    on left: 16, on right: 146
dictExpr (66)
    on left: 17, on right: 46
dictContext (67)
    on left: 18 19 20 21 22, on right: 17 19 21 22
dictList (68)
    on left: 23, on right: 19 20
expr (69)
    on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
    42 43 44 45 46, on right: 23 24 25 26 27 28 29 30 31 32 33 34 35
    36 37 48 49 53 66 72 76 86 100 110 132 140 154
exprList (70)
    on left: 47 48 49 50 51, on right: 15 48 50 51 65
defineFor (71)
    on left: 53, on right: 123
@1 (72)
    on left: 52, on right: 53
defineFunc (73)
    on left: 55, on right: 129
@2 (74)
    on left: 54, on right: 55
funcExpr (75)
    on left: 57, on right: 44
@3 (76)
    on left: 56, on right: 57
funcHeaderV (77)
    on left: 58, on right: 55
funcHeaderE (78)
    on left: 60, on right: 57
@4 (79)
    on left: 59, on right: 60
funcType (80)
    on left: 61, on right: 144
defineIden (81)
    on left: 62 63 64, on right: 43 65 66 86
idenFunc (82)
    on left: 65, on right: 63 120
idenBracket (83)
    on left: 66, on right: 64
defineIf (84)
    on left: 67 68 69 70, on right: 121
ifPart (85)
    on left: 72, on right: 67 68 69 70
@5 (86)
    on left: 71, on right: 72
elseIfParts (87)
    on left: 73 74, on right: 68 70 73
elseIfPart (88)
    on left: 76, on right: 73 74
@6 (89)
    on left: 75, on right: 76
elsePart (90)
    on left: 78, on right: 69 70
@7 (91)
    on left: 77, on right: 78
init (92)
    on left: 79, on right: 12
initContext (93)
    on left: 80, on right: 79
initOperator (94)
    on left: 81, on right: 80
initOperatorContexts (95)
    on left: 82 83, on right: 81 82
initOperatorContext (96)
    on left: 84 85, on right: 82 83
assignment (97)
    on left: 86, on right: 87
iteration (98)
    on left: 87, on right: 53 118
operator (99)
    on left: 88 89 90 91 92 93 94 95 96 97 98, on right: 85
defineParam (100)
    on left: 99 100, on right: 101 102
paramListP (101)
    on left: 101 102, on right: 101 104 151 152
paramList (102)
    on left: 103 104 105 106, on right: 53 58 60 105 106
subSpace (103)
    on left: 107 108, on right: 53 55 57 72 76 78 108 140 142 154
space (104)
    on left: 109, on right: 13 107
controlSpace (105)
    on left: 110 111 112 113, on right: 119
stats (106)
    on left: 114 115 116, on right: 109 115
stat (107)
    on left: 117 118 119 120 121 122 123 124, on right: 115 116
defineStats (108)
    on left: 125 126 127, on right: 109 126
defineStat (109)
    on left: 128 129 130, on right: 126 127
defineSwitch (110)
    on left: 132, on right: 124
@8 (111)
    on left: 131, on right: 132
switchSpace (112)
    on left: 133 134, on right: 132 134
switchStats (113)
    on left: 135 136, on right: 133 135
switchStat (114)
    on left: 137 138 140 142, on right: 135 136
@9 (115)
    on left: 139, on right: 140
@10 (116)
    on left: 141, on right: 142
defineType (117)
    on left: 143 144 145 146, on right: 14 16 55 60 61 85 99 100 147
    148
typeListP (118)
    on left: 147 148, on right: 147 150
typeList (119)
    on left: 149 150, on right: 61
defineVariale (120)
    on left: 151 152, on right: 130
defineWhile (121)
    on left: 154, on right: 122
@11 (122)
    on left: 153, on right: 154


state 0

    0 $accept: . program $end

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    DINIT      shift, and go to state 5
    CONST      shift, and go to state 6

    $end       reduce using rule 11 (program)
    $end       [reduce using rule 125 (defineStats)]
    NAME       [reduce using rule 125 (defineStats)]
    ENDL       [reduce using rule 125 (defineStats)]
    SEMICOLON  [reduce using rule 125 (defineStats)]
    LBRACE     [reduce using rule 125 (defineStats)]
    CONST      [reduce using rule 125 (defineStats)]
    $default   reduce using rule 125 (defineStats)

    endls          go to state 7
    endc           go to state 8
    name           go to state 9
    program        go to state 10
    arrayType      go to state 11
    dictType       go to state 12
    defineFunc     go to state 13
    funcType       go to state 14
    init           go to state 15
    defineParam    go to state 16
    paramListP     go to state 17
    space          go to state 18
    defineStats    go to state 19
    defineStat     go to state 20
    defineType     go to state 21
    defineVariale  go to state 22


state 1

   10 name: NAME .

    $default  reduce using rule 10 (name)


state 2

    2 endls: ENDL .

    $default  reduce using rule 2 (endls)


state 3

    3 endc: SEMICOLON .

    $default  reduce using rule 3 (endc)


state 4

   16 dictType: LBRACE . defineType RBRACE

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 23


state 5

   79 init: DINIT . endls initContext DEND endls

    ENDL  shift, and go to state 2

    endls  go to state 24


state 6

  152 defineVariale: CONST . paramListP

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 25
    defineType   go to state 26


state 7

    1 endls: endls . ENDL
    4 endc: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 4 (endc)]
    $default  reduce using rule 4 (endc)


state 8

  128 defineStat: endc .

    $default  reduce using rule 128 (defineStat)


state 9

  143 defineType: name .

    $default  reduce using rule 143 (defineType)


state 10

    0 $accept: program . $end

    $end  shift, and go to state 28


state 11

  145 defineType: arrayType .

    $default  reduce using rule 145 (defineType)


state 12

  146 defineType: dictType .

    $default  reduce using rule 146 (defineType)


state 13

  129 defineStat: defineFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 29


state 14

  144 defineType: funcType .

    $default  reduce using rule 144 (defineType)


state 15

   12 program: init .

    $default  reduce using rule 12 (program)


state 16

  102 paramListP: defineParam .

    $default  reduce using rule 102 (paramListP)


state 17

  101 paramListP: paramListP . list defineParam
  151 defineVariale: paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 151 (defineVariale)

    list  go to state 31


state 18

   13 program: space .

    $default  reduce using rule 13 (program)


state 19

  109 space: defineStats . stats
  126 defineStats: defineStats . defineStat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    RETURN     shift, and go to state 32
    IF         shift, and go to state 33
    FOR        shift, and go to state 34
    WHILE      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    CONTINUE   shift, and go to state 38
    CONST      shift, and go to state 6

    NAME       [reduce using rule 114 (stats)]
    ENDL       [reduce using rule 114 (stats)]
    SEMICOLON  [reduce using rule 114 (stats)]
    RETURN     [reduce using rule 114 (stats)]
    IF         [reduce using rule 114 (stats)]
    FOR        [reduce using rule 114 (stats)]
    WHILE      [reduce using rule 114 (stats)]
    SWITCH     [reduce using rule 114 (stats)]
    BREAK      [reduce using rule 114 (stats)]
    CONTINUE   [reduce using rule 114 (stats)]
    $default   reduce using rule 114 (stats)

    endls          go to state 7
    endc           go to state 39
    name           go to state 40
    arrayType      go to state 11
    dictType       go to state 12
    defineFor      go to state 41
    defineFunc     go to state 13
    funcType       go to state 14
    defineIden     go to state 42
    idenFunc       go to state 43
    idenBracket    go to state 44
    defineIf       go to state 45
    ifPart         go to state 46
    assignment     go to state 47
    iteration      go to state 48
    defineParam    go to state 16
    paramListP     go to state 17
    controlSpace   go to state 49
    stats          go to state 50
    stat           go to state 51
    defineStat     go to state 52
    defineSwitch   go to state 53
    defineType     go to state 21
    defineVariale  go to state 22
    defineWhile    go to state 54


state 20

  127 defineStats: defineStat .

    $default  reduce using rule 127 (defineStats)


state 21

   14 arrayType: defineType . BRACKET
   55 defineFunc: defineType . name funcHeaderV @2 subSpace
   61 funcType: defineType . COLON LPAREN typeList RPAREN
   99 defineParam: defineType . name
  100            | defineType . name ASSIGN expr

    NAME     shift, and go to state 1
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    name  go to state 57


state 22

  130 defineStat: defineVariale . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 58


state 23

   14 arrayType: defineType . BRACKET
   16 dictType: LBRACE defineType . RBRACE
   61 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 55
    RBRACE   shift, and go to state 59
    BRACKET  shift, and go to state 56


state 24

    1 endls: endls . ENDL
   79 init: DINIT endls . initContext DEND endls

    ENDL      shift, and go to state 27
    OPERATOR  shift, and go to state 60

    initContext   go to state 61
    initOperator  go to state 62


state 25

  101 paramListP: paramListP . list defineParam
  152 defineVariale: CONST paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 152 (defineVariale)

    list  go to state 31


state 26

   14 arrayType: defineType . BRACKET
   61 funcType: defineType . COLON LPAREN typeList RPAREN
   99 defineParam: defineType . name
  100            | defineType . name ASSIGN expr

    NAME     shift, and go to state 1
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    name  go to state 63


state 27

    1 endls: endls ENDL .

    $default  reduce using rule 1 (endls)


state 28

    0 $accept: program $end .

    $default  accept


state 29

  129 defineStat: defineFunc endc .

    $default  reduce using rule 129 (defineStat)


state 30

    5 list: COMMA .

    $default  reduce using rule 5 (list)


state 31

    6 list: list . endls
  101 paramListP: paramListP list . defineParam

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls        go to state 64
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 65
    defineType   go to state 26


state 32

  110 controlSpace: RETURN . expr
  111             | RETURN .

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    $default  reduce using rule 111 (controlSpace)

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 78
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 33

   72 ifPart: IF . LPAREN expr RPAREN @5 subSpace

    LPAREN  shift, and go to state 83


state 34

   53 defineFor: FOR . LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN subSpace

    LPAREN  shift, and go to state 84


state 35

  154 defineWhile: WHILE . LPAREN expr RPAREN @11 subSpace

    LPAREN  shift, and go to state 85


state 36

  132 defineSwitch: SWITCH . LPAREN expr RPAREN @8 switchSpace

    LPAREN  shift, and go to state 86


state 37

  112 controlSpace: BREAK .

    $default  reduce using rule 112 (controlSpace)


state 38

  113 controlSpace: CONTINUE .

    $default  reduce using rule 113 (controlSpace)


state 39

  117 stat: endc .
  128 defineStat: endc .

    $end       reduce using rule 117 (stat)
    $end       [reduce using rule 128 (defineStat)]
    NAME       reduce using rule 117 (stat)
    NAME       [reduce using rule 128 (defineStat)]
    ENDL       reduce using rule 117 (stat)
    ENDL       [reduce using rule 128 (defineStat)]
    SEMICOLON  reduce using rule 117 (stat)
    SEMICOLON  [reduce using rule 128 (defineStat)]
    RBRACE     reduce using rule 117 (stat)
    RBRACE     [reduce using rule 128 (defineStat)]
    LBRACE     reduce using rule 128 (defineStat)
    RETURN     reduce using rule 117 (stat)
    RETURN     [reduce using rule 128 (defineStat)]
    IF         reduce using rule 117 (stat)
    IF         [reduce using rule 128 (defineStat)]
    FOR        reduce using rule 117 (stat)
    FOR        [reduce using rule 128 (defineStat)]
    WHILE      reduce using rule 117 (stat)
    WHILE      [reduce using rule 128 (defineStat)]
    SWITCH     reduce using rule 117 (stat)
    SWITCH     [reduce using rule 128 (defineStat)]
    BREAK      reduce using rule 117 (stat)
    BREAK      [reduce using rule 128 (defineStat)]
    CONTINUE   reduce using rule 117 (stat)
    CONTINUE   [reduce using rule 128 (defineStat)]
    CONST      reduce using rule 128 (defineStat)
    $default   reduce using rule 117 (stat)


state 40

   62 defineIden: name .
  143 defineType: name .

    NAME      reduce using rule 143 (defineType)
    COLON     reduce using rule 143 (defineType)
    BRACKET   reduce using rule 143 (defineType)
    $default  reduce using rule 62 (defineIden)


state 41

  123 stat: defineFor . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 87


state 42

   65 idenFunc: defineIden . LPAREN exprList RPAREN
   66 idenBracket: defineIden . LBRACKET expr RBRACKET
   86 assignment: defineIden . ASSIGN expr

    ASSIGN    shift, and go to state 88
    LPAREN    shift, and go to state 89
    LBRACKET  shift, and go to state 90


state 43

   63 defineIden: idenFunc .
  120 stat: idenFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 63 (defineIden)

    endls  go to state 7
    endc   go to state 91


state 44

   64 defineIden: idenBracket .

    $default  reduce using rule 64 (defineIden)


state 45

  121 stat: defineIf . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 92


state 46

   67 defineIf: ifPart .
   68         | ifPart . elseIfParts
   69         | ifPart . elsePart
   70         | ifPart . elseIfParts elsePart

    ELSE  shift, and go to state 93

    $default  reduce using rule 67 (defineIf)

    elseIfParts  go to state 94
    elseIfPart   go to state 95
    elsePart     go to state 96


state 47

   87 iteration: assignment .

    $default  reduce using rule 87 (iteration)


state 48

  118 stat: iteration . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 97


state 49

  119 stat: controlSpace . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 98


state 50

  109 space: defineStats stats .
  115 stats: stats . stat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    RETURN     shift, and go to state 32
    IF         shift, and go to state 33
    FOR        shift, and go to state 34
    WHILE      shift, and go to state 35
    SWITCH     shift, and go to state 36
    BREAK      shift, and go to state 37
    CONTINUE   shift, and go to state 38

    $default  reduce using rule 109 (space)

    endls         go to state 7
    endc          go to state 99
    name          go to state 75
    defineFor     go to state 41
    defineIden    go to state 42
    idenFunc      go to state 43
    idenBracket   go to state 44
    defineIf      go to state 45
    ifPart        go to state 46
    assignment    go to state 47
    iteration     go to state 48
    controlSpace  go to state 49
    stat          go to state 100
    defineSwitch  go to state 53
    defineWhile   go to state 54


state 51

  116 stats: stat .

    $default  reduce using rule 116 (stats)


state 52

  126 defineStats: defineStats defineStat .

    $default  reduce using rule 126 (defineStats)


state 53

  124 stat: defineSwitch . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 101


state 54

  122 stat: defineWhile . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 7
    endc   go to state 102


state 55

   61 funcType: defineType COLON . LPAREN typeList RPAREN

    LPAREN  shift, and go to state 103


state 56

   14 arrayType: defineType BRACKET .

    $default  reduce using rule 14 (arrayType)


state 57

   55 defineFunc: defineType name . funcHeaderV @2 subSpace
   99 defineParam: defineType name .
  100            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 104
    LPAREN  shift, and go to state 105

    $default  reduce using rule 99 (defineParam)

    funcHeaderV  go to state 106


state 58

  130 defineStat: defineVariale endc .

    $default  reduce using rule 130 (defineStat)


state 59

   16 dictType: LBRACE defineType RBRACE .

    $default  reduce using rule 16 (dictType)


state 60

   81 initOperator: OPERATOR . RBRACE initOperatorContexts LBRACE endls

    RBRACE  shift, and go to state 107


state 61

   79 init: DINIT endls initContext . DEND endls

    DEND  shift, and go to state 108


state 62

   80 initContext: initOperator .

    $default  reduce using rule 80 (initContext)


state 63

   99 defineParam: defineType name .
  100            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 104

    $default  reduce using rule 99 (defineParam)


state 64

    1 endls: endls . ENDL
    6 list: list endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 6 (list)]
    $default  reduce using rule 6 (list)


state 65

  101 paramListP: paramListP list defineParam .

    $default  reduce using rule 101 (paramListP)


state 66

   41 expr: INT .

    $default  reduce using rule 41 (expr)


state 67

   42 expr: NUMBER .

    $default  reduce using rule 42 (expr)


state 68

   38 expr: STRING .

    $default  reduce using rule 38 (expr)


state 69

   40 expr: VALUE_BOOLEAN .

    $default  reduce using rule 40 (expr)


state 70

   39 expr: VALUE_VOID .

    $default  reduce using rule 39 (expr)


state 71

   37 expr: RPAREN . expr LPAREN

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 109
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 72

   60 funcHeaderE: LPAREN . @4 paramList RPAREN COLON defineType

    $default  reduce using rule 59 (@4)

    @4  go to state 110


state 73

   17 dictExpr: LBRACE . dictContext RBRACE

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 2

    NAME      [reduce using rule 18 (dictContext)]
    ENDL      [reduce using rule 18 (dictContext)]
    $default  reduce using rule 18 (dictContext)

    endls        go to state 111
    name         go to state 112
    dictContext  go to state 113
    dictList     go to state 114


state 74

   15 arrayExpr: LBRACKET . exprList RBRACKET

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 2
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 115
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 116
    exprList     go to state 117
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 75

   62 defineIden: name .

    $default  reduce using rule 62 (defineIden)


state 76

   45 expr: arrayExpr .

    $default  reduce using rule 45 (expr)


state 77

   46 expr: dictExpr .

    $default  reduce using rule 46 (expr)


state 78

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  110 controlSpace: RETURN expr .

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 110 (controlSpace)


state 79

   44 expr: funcExpr .

    $default  reduce using rule 44 (expr)


state 80

   57 funcExpr: funcHeaderE . @3 subSpace

    $default  reduce using rule 56 (@3)

    @3  go to state 131


state 81

   43 expr: defineIden .
   65 idenFunc: defineIden . LPAREN exprList RPAREN
   66 idenBracket: defineIden . LBRACKET expr RBRACKET

    LPAREN    shift, and go to state 89
    LBRACKET  shift, and go to state 90

    LPAREN    [reduce using rule 43 (expr)]
    LBRACKET  [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)


state 82

   63 defineIden: idenFunc .

    $default  reduce using rule 63 (defineIden)


state 83

   72 ifPart: IF LPAREN . expr RPAREN @5 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 132
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 84

   53 defineFor: FOR LPAREN . paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN subSpace

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 103 (paramList)]
    $default  reduce using rule 103 (paramList)

    endls        go to state 133
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 134
    paramList    go to state 135
    defineType   go to state 26


state 85

  154 defineWhile: WHILE LPAREN . expr RPAREN @11 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 136
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 86

  132 defineSwitch: SWITCH LPAREN . expr RPAREN @8 switchSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 137
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 87

  123 stat: defineFor endc .

    $default  reduce using rule 123 (stat)


state 88

   86 assignment: defineIden ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 138
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 89

   65 idenFunc: defineIden LPAREN . exprList RPAREN

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 2
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 115
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 116
    exprList     go to state 139
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 90

   66 idenBracket: defineIden LBRACKET . expr RBRACKET

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 140
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 91

  120 stat: idenFunc endc .

    $default  reduce using rule 120 (stat)


state 92

  121 stat: defineIf endc .

    $default  reduce using rule 121 (stat)


state 93

   76 elseIfPart: ELSE . IF LPAREN expr RPAREN @6 subSpace
   78 elsePart: ELSE . @7 subSpace

    IF  shift, and go to state 141

    $default  reduce using rule 77 (@7)

    @7  go to state 142


state 94

   68 defineIf: ifPart elseIfParts .
   70         | ifPart elseIfParts . elsePart
   73 elseIfParts: elseIfParts . elseIfPart

    ELSE  shift, and go to state 93

    $default  reduce using rule 68 (defineIf)

    elseIfPart  go to state 143
    elsePart    go to state 144


state 95

   74 elseIfParts: elseIfPart .

    $default  reduce using rule 74 (elseIfParts)


state 96

   69 defineIf: ifPart elsePart .

    $default  reduce using rule 69 (defineIf)


state 97

  118 stat: iteration endc .

    $default  reduce using rule 118 (stat)


state 98

  119 stat: controlSpace endc .

    $default  reduce using rule 119 (stat)


state 99

  117 stat: endc .

    $default  reduce using rule 117 (stat)


state 100

  115 stats: stats stat .

    $default  reduce using rule 115 (stats)


state 101

  124 stat: defineSwitch endc .

    $default  reduce using rule 124 (stat)


state 102

  122 stat: defineWhile endc .

    $default  reduce using rule 122 (stat)


state 103

   61 funcType: defineType COLON LPAREN . typeList RPAREN

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    $default  reduce using rule 149 (typeList)

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 145
    typeListP   go to state 146
    typeList    go to state 147


state 104

  100 defineParam: defineType name ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 148
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 105

   58 funcHeaderV: LPAREN . paramList RPAREN

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 103 (paramList)]
    $default  reduce using rule 103 (paramList)

    endls        go to state 133
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 134
    paramList    go to state 149
    defineType   go to state 26


state 106

   55 defineFunc: defineType name funcHeaderV . @2 subSpace

    $default  reduce using rule 54 (@2)

    @2  go to state 150


state 107

   81 initOperator: OPERATOR RBRACE . initOperatorContexts LBRACE endls

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls                 go to state 151
    name                  go to state 9
    arrayType             go to state 11
    dictType              go to state 12
    funcType              go to state 14
    initOperatorContexts  go to state 152
    initOperatorContext   go to state 153
    defineType            go to state 154


state 108

   79 init: DINIT endls initContext DEND . endls

    ENDL  shift, and go to state 2

    endls  go to state 155


state 109

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   37     | RPAREN expr . LPAREN

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    LPAREN   shift, and go to state 156


state 110

   60 funcHeaderE: LPAREN @4 . paramList RPAREN COLON defineType

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 103 (paramList)]
    $default  reduce using rule 103 (paramList)

    endls        go to state 133
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 134
    paramList    go to state 157
    defineType   go to state 26


state 111

    1 endls: endls . ENDL
   21 dictContext: endls . dictContext

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 158

    NAME      [reduce using rule 18 (dictContext)]
    ENDL      [reduce using rule 18 (dictContext)]
    $default  reduce using rule 18 (dictContext)

    endls        go to state 111
    name         go to state 112
    dictContext  go to state 159
    dictList     go to state 114


state 112

   23 dictList: name . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 160
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 113

   17 dictExpr: LBRACE dictContext . RBRACE
   19 dictContext: dictContext . lists dictList
   22            | dictContext . endls

    ENDL    shift, and go to state 2
    RBRACE  shift, and go to state 161
    COMMA   shift, and go to state 30

    $default  reduce using rule 7 (lists)

    endls  go to state 162
    list   go to state 163
    lists  go to state 164


state 114

   20 dictContext: dictList .

    $default  reduce using rule 20 (dictContext)


state 115

    1 endls: endls . ENDL
   50 exprList: endls . exprList

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 158
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    NAME           [reduce using rule 47 (exprList)]
    ENDL           [reduce using rule 47 (exprList)]
    INT            [reduce using rule 47 (exprList)]
    NUMBER         [reduce using rule 47 (exprList)]
    STRING         [reduce using rule 47 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 47 (exprList)]
    VALUE_VOID     [reduce using rule 47 (exprList)]
    RPAREN         [reduce using rule 47 (exprList)]
    LPAREN         [reduce using rule 47 (exprList)]
    LBRACE         [reduce using rule 47 (exprList)]
    LBRACKET       [reduce using rule 47 (exprList)]
    $default       reduce using rule 47 (exprList)

    endls        go to state 115
    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 116
    exprList     go to state 165
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 116

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   49 exprList: expr .

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 49 (exprList)


state 117

   15 arrayExpr: LBRACKET exprList . RBRACKET
   48 exprList: exprList . lists expr
   51         | exprList . endls

    ENDL      shift, and go to state 2
    COMMA     shift, and go to state 30
    RBRACKET  shift, and go to state 166

    $default  reduce using rule 7 (lists)

    endls  go to state 167
    list   go to state 163
    lists  go to state 168


state 118

   25 expr: expr OR . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 169
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 119

   24 expr: expr AND . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 170
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 120

   27 expr: expr NE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 171
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 121

   26 expr: expr EQ . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 172
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 122

   29 expr: expr GE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 173
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 123

   28 expr: expr GT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 174
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 124

   31 expr: expr LE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 175
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 125

   30 expr: expr LT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 176
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 126

   33 expr: expr MINUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 177
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 127

   32 expr: expr PLUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 178
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 128

   36 expr: expr MODULUS . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 179
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 129

   35 expr: expr DIVIDE . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 180
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 130

   34 expr: expr MULT . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 181
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 131

   57 funcExpr: funcHeaderE @3 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 184


state 132

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   72 ifPart: IF LPAREN expr . RPAREN @5 subSpace

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    RPAREN   shift, and go to state 185


state 133

    1 endls: endls . ENDL
  105 paramList: endls . paramList

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 158
    LBRACE  shift, and go to state 4

    ENDL      [reduce using rule 103 (paramList)]
    $default  reduce using rule 103 (paramList)

    endls        go to state 133
    name         go to state 9
    arrayType    go to state 11
    dictType     go to state 12
    funcType     go to state 14
    defineParam  go to state 16
    paramListP   go to state 134
    paramList    go to state 186
    defineType   go to state 26


state 134

  101 paramListP: paramListP . list defineParam
  104 paramList: paramListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 104 (paramList)

    list  go to state 31


state 135

   53 defineFor: FOR LPAREN paramList . @1 SEMICOLON expr SEMICOLON iteration RPAREN subSpace
  106 paramList: paramList . endls

    ENDL  shift, and go to state 2

    $default  reduce using rule 52 (@1)

    endls  go to state 187
    @1     go to state 188


state 136

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  154 defineWhile: WHILE LPAREN expr . RPAREN @11 subSpace

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    RPAREN   shift, and go to state 189


state 137

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  132 defineSwitch: SWITCH LPAREN expr . RPAREN @8 switchSpace

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    RPAREN   shift, and go to state 190


state 138

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   86 assignment: defineIden ASSIGN expr .

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 86 (assignment)


state 139

   48 exprList: exprList . lists expr
   51         | exprList . endls
   65 idenFunc: defineIden LPAREN exprList . RPAREN

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 191
    COMMA   shift, and go to state 30

    RPAREN    [reduce using rule 7 (lists)]
    $default  reduce using rule 7 (lists)

    endls  go to state 167
    list   go to state 163
    lists  go to state 168


state 140

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   66 idenBracket: defineIden LBRACKET expr . RBRACKET

    OR        shift, and go to state 118
    AND       shift, and go to state 119
    NE        shift, and go to state 120
    EQ        shift, and go to state 121
    GE        shift, and go to state 122
    GT        shift, and go to state 123
    LE        shift, and go to state 124
    LT        shift, and go to state 125
    MINUS     shift, and go to state 126
    PLUS      shift, and go to state 127
    MODULUS   shift, and go to state 128
    DIVIDE    shift, and go to state 129
    MULT      shift, and go to state 130
    RBRACKET  shift, and go to state 192


state 141

   76 elseIfPart: ELSE IF . LPAREN expr RPAREN @6 subSpace

    LPAREN  shift, and go to state 193


state 142

   78 elsePart: ELSE @7 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 194


state 143

   73 elseIfParts: elseIfParts elseIfPart .

    $default  reduce using rule 73 (elseIfParts)


state 144

   70 defineIf: ifPart elseIfParts elsePart .

    $default  reduce using rule 70 (defineIf)


state 145

   14 arrayType: defineType . BRACKET
   61 funcType: defineType . COLON LPAREN typeList RPAREN
  148 typeListP: defineType .

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 148 (typeListP)


state 146

  147 typeListP: typeListP . list defineType
  150 typeList: typeListP .

    COMMA  shift, and go to state 30

    $default  reduce using rule 150 (typeList)

    list  go to state 195


state 147

   61 funcType: defineType COLON LPAREN typeList . RPAREN

    RPAREN  shift, and go to state 196


state 148

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  100 defineParam: defineType name ASSIGN expr .

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 100 (defineParam)


state 149

   58 funcHeaderV: LPAREN paramList . RPAREN
  106 paramList: paramList . endls

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 197

    endls  go to state 187


state 150

   55 defineFunc: defineType name funcHeaderV @2 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 198


state 151

    1 endls: endls . ENDL
   84 initOperatorContext: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 84 (initOperatorContext)]
    $default  reduce using rule 84 (initOperatorContext)


state 152

   81 initOperator: OPERATOR RBRACE initOperatorContexts . LBRACE endls
   82 initOperatorContexts: initOperatorContexts . initOperatorContext

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 199

    endls                go to state 151
    name                 go to state 9
    arrayType            go to state 11
    dictType             go to state 12
    funcType             go to state 14
    initOperatorContext  go to state 200
    defineType           go to state 154


state 153

   83 initOperatorContexts: initOperatorContext .

    $default  reduce using rule 83 (initOperatorContexts)


state 154

   14 arrayType: defineType . BRACKET
   61 funcType: defineType . COLON LPAREN typeList RPAREN
   85 initOperatorContext: defineType . operator defineType ASSIGN name endls

    NE       shift, and go to state 201
    EQ       shift, and go to state 202
    GE       shift, and go to state 203
    GT       shift, and go to state 204
    LE       shift, and go to state 205
    LT       shift, and go to state 206
    MINUS    shift, and go to state 207
    PLUS     shift, and go to state 208
    MODULUS  shift, and go to state 209
    DIVIDE   shift, and go to state 210
    MULT     shift, and go to state 211
    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    operator  go to state 212


state 155

    1 endls: endls . ENDL
   79 init: DINIT endls initContext DEND endls .

    ENDL  shift, and go to state 27

    $default  reduce using rule 79 (init)


state 156

   37 expr: RPAREN expr LPAREN .

    $default  reduce using rule 37 (expr)


state 157

   60 funcHeaderE: LPAREN @4 paramList . RPAREN COLON defineType
  106 paramList: paramList . endls

    ENDL    shift, and go to state 2
    RPAREN  shift, and go to state 213

    endls  go to state 187


state 158

    1 endls: endls ENDL .
    2      | ENDL .

    NAME           reduce using rule 1 (endls)
    NAME           [reduce using rule 2 (endls)]
    ENDL           reduce using rule 1 (endls)
    ENDL           [reduce using rule 2 (endls)]
    INT            reduce using rule 1 (endls)
    INT            [reduce using rule 2 (endls)]
    NUMBER         reduce using rule 1 (endls)
    NUMBER         [reduce using rule 2 (endls)]
    STRING         reduce using rule 1 (endls)
    STRING         [reduce using rule 2 (endls)]
    VALUE_BOOLEAN  reduce using rule 1 (endls)
    VALUE_BOOLEAN  [reduce using rule 2 (endls)]
    VALUE_VOID     reduce using rule 1 (endls)
    VALUE_VOID     [reduce using rule 2 (endls)]
    SEMICOLON      reduce using rule 1 (endls)
    SEMICOLON      [reduce using rule 2 (endls)]
    RPAREN         reduce using rule 1 (endls)
    RPAREN         [reduce using rule 2 (endls)]
    LPAREN         reduce using rule 1 (endls)
    LPAREN         [reduce using rule 2 (endls)]
    RBRACE         reduce using rule 1 (endls)
    RBRACE         [reduce using rule 2 (endls)]
    LBRACE         reduce using rule 1 (endls)
    LBRACE         [reduce using rule 2 (endls)]
    COMMA          reduce using rule 1 (endls)
    COMMA          [reduce using rule 2 (endls)]
    RBRACKET       reduce using rule 1 (endls)
    RBRACKET       [reduce using rule 2 (endls)]
    LBRACKET       reduce using rule 1 (endls)
    LBRACKET       [reduce using rule 2 (endls)]
    $default       reduce using rule 1 (endls)


state 159

   19 dictContext: dictContext . lists dictList
   21            | endls dictContext .
   22            | dictContext . endls

    ENDL   shift, and go to state 2
    COMMA  shift, and go to state 30

    NAME      reduce using rule 7 (lists)
    NAME      [reduce using rule 21 (dictContext)]
    ENDL      [reduce using rule 21 (dictContext)]
    RBRACE    reduce using rule 21 (dictContext)
    COMMA     [reduce using rule 21 (dictContext)]
    $default  reduce using rule 7 (lists)

    endls  go to state 162
    list   go to state 163
    lists  go to state 164


state 160

   23 dictList: name expr .
   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 23 (dictList)


state 161

   17 dictExpr: LBRACE dictContext RBRACE .

    $default  reduce using rule 17 (dictExpr)


state 162

    1 endls: endls . ENDL
    9 lists: endls .
   22 dictContext: dictContext endls .

    ENDL  shift, and go to state 27

    NAME      reduce using rule 9 (lists)
    NAME      [reduce using rule 22 (dictContext)]
    ENDL      [reduce using rule 22 (dictContext)]
    $default  reduce using rule 22 (dictContext)


state 163

    6 list: list . endls
    8 lists: list .

    ENDL  shift, and go to state 2

    $default  reduce using rule 8 (lists)

    endls  go to state 64


state 164

   19 dictContext: dictContext lists . dictList

    NAME  shift, and go to state 1

    name      go to state 112
    dictList  go to state 214


state 165

   48 exprList: exprList . lists expr
   50         | endls exprList .
   51         | exprList . endls

    ENDL   shift, and go to state 2
    COMMA  shift, and go to state 30

    NAME           reduce using rule 7 (lists)
    NAME           [reduce using rule 50 (exprList)]
    ENDL           [reduce using rule 50 (exprList)]
    INT            reduce using rule 7 (lists)
    INT            [reduce using rule 50 (exprList)]
    NUMBER         reduce using rule 7 (lists)
    NUMBER         [reduce using rule 50 (exprList)]
    STRING         reduce using rule 7 (lists)
    STRING         [reduce using rule 50 (exprList)]
    VALUE_BOOLEAN  reduce using rule 7 (lists)
    VALUE_BOOLEAN  [reduce using rule 50 (exprList)]
    VALUE_VOID     reduce using rule 7 (lists)
    VALUE_VOID     [reduce using rule 50 (exprList)]
    RPAREN         reduce using rule 7 (lists)
    RPAREN         [reduce using rule 50 (exprList)]
    LPAREN         reduce using rule 7 (lists)
    LPAREN         [reduce using rule 50 (exprList)]
    LBRACE         reduce using rule 7 (lists)
    LBRACE         [reduce using rule 50 (exprList)]
    COMMA          [reduce using rule 50 (exprList)]
    RBRACKET       reduce using rule 50 (exprList)
    LBRACKET       reduce using rule 7 (lists)
    LBRACKET       [reduce using rule 50 (exprList)]
    $default       reduce using rule 7 (lists)

    endls  go to state 167
    list   go to state 163
    lists  go to state 168


state 166

   15 arrayExpr: LBRACKET exprList RBRACKET .

    $default  reduce using rule 15 (arrayExpr)


state 167

    1 endls: endls . ENDL
    9 lists: endls .
   51 exprList: exprList endls .

    ENDL  shift, and go to state 27

    NAME           reduce using rule 9 (lists)
    NAME           [reduce using rule 51 (exprList)]
    ENDL           [reduce using rule 51 (exprList)]
    INT            reduce using rule 9 (lists)
    INT            [reduce using rule 51 (exprList)]
    NUMBER         reduce using rule 9 (lists)
    NUMBER         [reduce using rule 51 (exprList)]
    STRING         reduce using rule 9 (lists)
    STRING         [reduce using rule 51 (exprList)]
    VALUE_BOOLEAN  reduce using rule 9 (lists)
    VALUE_BOOLEAN  [reduce using rule 51 (exprList)]
    VALUE_VOID     reduce using rule 9 (lists)
    VALUE_VOID     [reduce using rule 51 (exprList)]
    RPAREN         reduce using rule 9 (lists)
    RPAREN         [reduce using rule 51 (exprList)]
    LPAREN         reduce using rule 9 (lists)
    LPAREN         [reduce using rule 51 (exprList)]
    LBRACE         reduce using rule 9 (lists)
    LBRACE         [reduce using rule 51 (exprList)]
    COMMA          reduce using rule 51 (exprList)
    RBRACKET       reduce using rule 51 (exprList)
    LBRACKET       reduce using rule 9 (lists)
    LBRACKET       [reduce using rule 51 (exprList)]
    $default       reduce using rule 9 (lists)


state 168

   48 exprList: exprList lists . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 215
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 169

   24 expr: expr . AND expr
   25     | expr . OR expr
   25     | expr OR expr .
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 25 (expr)


state 170

   24 expr: expr . AND expr
   24     | expr AND expr .
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 24 (expr)


state 171

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   27     | expr NE expr .
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 27 (expr)


state 172

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   26     | expr EQ expr .
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 26 (expr)


state 173

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   29     | expr GE expr .
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 29 (expr)


state 174

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   28     | expr GT expr .
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 28 (expr)


state 175

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   31     | expr LE expr .
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 31 (expr)


state 176

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   30     | expr LT expr .
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 30 (expr)


state 177

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   33     | expr MINUS expr .
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 33 (expr)


state 178

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   32     | expr PLUS expr .
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 32 (expr)


state 179

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   36     | expr MODULUS expr .

    $default  reduce using rule 36 (expr)


state 180

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   35     | expr DIVIDE expr .
   36     | expr . MODULUS expr

    $default  reduce using rule 35 (expr)


state 181

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   34     | expr MULT expr .
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr

    $default  reduce using rule 34 (expr)


state 182

  107 subSpace: LBRACE . space RBRACE

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 4
    CONST      shift, and go to state 6

    NAME       [reduce using rule 125 (defineStats)]
    ENDL       [reduce using rule 125 (defineStats)]
    SEMICOLON  [reduce using rule 125 (defineStats)]
    LBRACE     [reduce using rule 125 (defineStats)]
    CONST      [reduce using rule 125 (defineStats)]
    $default   reduce using rule 125 (defineStats)

    endls          go to state 7
    endc           go to state 8
    name           go to state 9
    arrayType      go to state 11
    dictType       go to state 12
    defineFunc     go to state 13
    funcType       go to state 14
    defineParam    go to state 16
    paramListP     go to state 17
    space          go to state 216
    defineStats    go to state 19
    defineStat     go to state 20
    defineType     go to state 21
    defineVariale  go to state 22


state 183

    1 endls: endls . ENDL
  108 subSpace: endls . subSpace

    ENDL    shift, and go to state 158
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 217


state 184

   57 funcExpr: funcHeaderE @3 subSpace .

    $default  reduce using rule 57 (funcExpr)


state 185

   72 ifPart: IF LPAREN expr RPAREN . @5 subSpace

    $default  reduce using rule 71 (@5)

    @5  go to state 218


state 186

  105 paramList: endls paramList .
  106          | paramList . endls

    ENDL  shift, and go to state 2

    ENDL      [reduce using rule 105 (paramList)]
    $default  reduce using rule 105 (paramList)

    endls  go to state 187


state 187

    1 endls: endls . ENDL
  106 paramList: paramList endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 106 (paramList)]
    $default  reduce using rule 106 (paramList)


state 188

   53 defineFor: FOR LPAREN paramList @1 . SEMICOLON expr SEMICOLON iteration RPAREN subSpace

    SEMICOLON  shift, and go to state 219


state 189

  154 defineWhile: WHILE LPAREN expr RPAREN . @11 subSpace

    $default  reduce using rule 153 (@11)

    @11  go to state 220


state 190

  132 defineSwitch: SWITCH LPAREN expr RPAREN . @8 switchSpace

    $default  reduce using rule 131 (@8)

    @8  go to state 221


state 191

   65 idenFunc: defineIden LPAREN exprList RPAREN .

    $default  reduce using rule 65 (idenFunc)


state 192

   66 idenBracket: defineIden LBRACKET expr RBRACKET .

    $default  reduce using rule 66 (idenBracket)


state 193

   76 elseIfPart: ELSE IF LPAREN . expr RPAREN @6 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 222
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 194

   78 elsePart: ELSE @7 subSpace .

    $default  reduce using rule 78 (elsePart)


state 195

    6 list: list . endls
  147 typeListP: typeListP list . defineType

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls       go to state 64
    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 223


state 196

   61 funcType: defineType COLON LPAREN typeList RPAREN .

    $default  reduce using rule 61 (funcType)


state 197

   58 funcHeaderV: LPAREN paramList RPAREN .

    $default  reduce using rule 58 (funcHeaderV)


state 198

   55 defineFunc: defineType name funcHeaderV @2 subSpace .

    $default  reduce using rule 55 (defineFunc)


state 199

   16 dictType: LBRACE . defineType RBRACE
   81 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE . endls

    NAME    shift, and go to state 1
    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 4

    endls       go to state 224
    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 23


state 200

   82 initOperatorContexts: initOperatorContexts initOperatorContext .

    $default  reduce using rule 82 (initOperatorContexts)


state 201

   94 operator: NE .

    $default  reduce using rule 94 (operator)


state 202

   93 operator: EQ .

    $default  reduce using rule 93 (operator)


state 203

   96 operator: GE .

    $default  reduce using rule 96 (operator)


state 204

   95 operator: GT .

    $default  reduce using rule 95 (operator)


state 205

   98 operator: LE .

    $default  reduce using rule 98 (operator)


state 206

   97 operator: LT .

    $default  reduce using rule 97 (operator)


state 207

   89 operator: MINUS .

    $default  reduce using rule 89 (operator)


state 208

   88 operator: PLUS .

    $default  reduce using rule 88 (operator)


state 209

   92 operator: MODULUS .

    $default  reduce using rule 92 (operator)


state 210

   91 operator: DIVIDE .

    $default  reduce using rule 91 (operator)


state 211

   90 operator: MULT .

    $default  reduce using rule 90 (operator)


state 212

   85 initOperatorContext: defineType operator . defineType ASSIGN name endls

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 225


state 213

   60 funcHeaderE: LPAREN @4 paramList RPAREN . COLON defineType

    COLON  shift, and go to state 226


state 214

   19 dictContext: dictContext lists dictList .

    $default  reduce using rule 19 (dictContext)


state 215

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   48 exprList: exprList lists expr .

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130

    $default  reduce using rule 48 (exprList)


state 216

  107 subSpace: LBRACE space . RBRACE

    RBRACE  shift, and go to state 227


state 217

  108 subSpace: endls subSpace .

    $default  reduce using rule 108 (subSpace)


state 218

   72 ifPart: IF LPAREN expr RPAREN @5 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 228


state 219

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON . expr SEMICOLON iteration RPAREN subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 229
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 220

  154 defineWhile: WHILE LPAREN expr RPAREN @11 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 230


state 221

  132 defineSwitch: SWITCH LPAREN expr RPAREN @8 . switchSpace

    ENDL    shift, and go to state 2
    RBRACE  shift, and go to state 231

    endls        go to state 232
    switchSpace  go to state 233


state 222

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   76 elseIfPart: ELSE IF LPAREN expr . RPAREN @6 subSpace

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    RPAREN   shift, and go to state 234


state 223

   14 arrayType: defineType . BRACKET
   61 funcType: defineType . COLON LPAREN typeList RPAREN
  147 typeListP: typeListP list defineType .

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 147 (typeListP)


state 224

    1 endls: endls . ENDL
   81 initOperator: OPERATOR RBRACE initOperatorContexts LBRACE endls .

    ENDL  shift, and go to state 27

    $default  reduce using rule 81 (initOperator)


state 225

   14 arrayType: defineType . BRACKET
   61 funcType: defineType . COLON LPAREN typeList RPAREN
   85 initOperatorContext: defineType operator defineType . ASSIGN name endls

    COLON    shift, and go to state 55
    ASSIGN   shift, and go to state 235
    BRACKET  shift, and go to state 56


state 226

   60 funcHeaderE: LPAREN @4 paramList RPAREN COLON . defineType

    NAME    shift, and go to state 1
    LBRACE  shift, and go to state 4

    name        go to state 9
    arrayType   go to state 11
    dictType    go to state 12
    funcType    go to state 14
    defineType  go to state 236


state 227

  107 subSpace: LBRACE space RBRACE .

    $default  reduce using rule 107 (subSpace)


state 228

   72 ifPart: IF LPAREN expr RPAREN @5 subSpace .

    $default  reduce using rule 72 (ifPart)


state 229

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr . SEMICOLON iteration RPAREN subSpace

    OR         shift, and go to state 118
    AND        shift, and go to state 119
    NE         shift, and go to state 120
    EQ         shift, and go to state 121
    GE         shift, and go to state 122
    GT         shift, and go to state 123
    LE         shift, and go to state 124
    LT         shift, and go to state 125
    MINUS      shift, and go to state 126
    PLUS       shift, and go to state 127
    MODULUS    shift, and go to state 128
    DIVIDE     shift, and go to state 129
    MULT       shift, and go to state 130
    SEMICOLON  shift, and go to state 237


state 230

  154 defineWhile: WHILE LPAREN expr RPAREN @11 subSpace .

    $default  reduce using rule 154 (defineWhile)


state 231

  133 switchSpace: RBRACE . switchStats LBRACE

    ENDL     shift, and go to state 2
    CASE     shift, and go to state 238
    DEFAULT  shift, and go to state 239

    ENDL      [reduce using rule 137 (switchStat)]
    CASE      [reduce using rule 137 (switchStat)]
    DEFAULT   [reduce using rule 137 (switchStat)]
    $default  reduce using rule 137 (switchStat)

    endls        go to state 240
    switchStats  go to state 241
    switchStat   go to state 242


state 232

    1 endls: endls . ENDL
  134 switchSpace: endls . switchSpace

    ENDL    shift, and go to state 158
    RBRACE  shift, and go to state 231

    endls        go to state 232
    switchSpace  go to state 243


state 233

  132 defineSwitch: SWITCH LPAREN expr RPAREN @8 switchSpace .

    $default  reduce using rule 132 (defineSwitch)


state 234

   76 elseIfPart: ELSE IF LPAREN expr RPAREN . @6 subSpace

    $default  reduce using rule 75 (@6)

    @6  go to state 244


state 235

   85 initOperatorContext: defineType operator defineType ASSIGN . name endls

    NAME  shift, and go to state 1

    name  go to state 245


state 236

   14 arrayType: defineType . BRACKET
   60 funcHeaderE: LPAREN @4 paramList RPAREN COLON defineType .
   61 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 55
    BRACKET  shift, and go to state 56

    $default  reduce using rule 60 (funcHeaderE)


state 237

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON . iteration RPAREN subSpace

    NAME  shift, and go to state 1

    name         go to state 75
    defineIden   go to state 42
    idenFunc     go to state 82
    idenBracket  go to state 44
    assignment   go to state 47
    iteration    go to state 246


state 238

  140 switchStat: CASE . LPAREN expr RPAREN @9 subSpace

    LPAREN  shift, and go to state 247


state 239

  142 switchStat: DEFAULT . @10 subSpace

    $default  reduce using rule 141 (@10)

    @10  go to state 248


state 240

    1 endls: endls . ENDL
  138 switchStat: endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 138 (switchStat)]
    $default  reduce using rule 138 (switchStat)


state 241

  133 switchSpace: RBRACE switchStats . LBRACE
  135 switchStats: switchStats . switchStat

    ENDL     shift, and go to state 2
    LBRACE   shift, and go to state 249
    CASE     shift, and go to state 238
    DEFAULT  shift, and go to state 239

    ENDL     [reduce using rule 137 (switchStat)]
    LBRACE   [reduce using rule 137 (switchStat)]
    CASE     [reduce using rule 137 (switchStat)]
    DEFAULT  [reduce using rule 137 (switchStat)]

    endls       go to state 240
    switchStat  go to state 250


state 242

  136 switchStats: switchStat .

    $default  reduce using rule 136 (switchStats)


state 243

  134 switchSpace: endls switchSpace .

    $default  reduce using rule 134 (switchSpace)


state 244

   76 elseIfPart: ELSE IF LPAREN expr RPAREN @6 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 251


state 245

   85 initOperatorContext: defineType operator defineType ASSIGN name . endls

    ENDL  shift, and go to state 2

    endls  go to state 252


state 246

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration . RPAREN subSpace

    RPAREN  shift, and go to state 253


state 247

  140 switchStat: CASE LPAREN . expr RPAREN @9 subSpace

    NAME           shift, and go to state 1
    INT            shift, and go to state 66
    NUMBER         shift, and go to state 67
    STRING         shift, and go to state 68
    VALUE_BOOLEAN  shift, and go to state 69
    VALUE_VOID     shift, and go to state 70
    RPAREN         shift, and go to state 71
    LPAREN         shift, and go to state 72
    LBRACE         shift, and go to state 73
    LBRACKET       shift, and go to state 74

    name         go to state 75
    arrayExpr    go to state 76
    dictExpr     go to state 77
    expr         go to state 254
    funcExpr     go to state 79
    funcHeaderE  go to state 80
    defineIden   go to state 81
    idenFunc     go to state 82
    idenBracket  go to state 44


state 248

  142 switchStat: DEFAULT @10 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 255


state 249

  133 switchSpace: RBRACE switchStats LBRACE .

    $default  reduce using rule 133 (switchSpace)


state 250

  135 switchStats: switchStats switchStat .

    $default  reduce using rule 135 (switchStats)


state 251

   76 elseIfPart: ELSE IF LPAREN expr RPAREN @6 subSpace .

    $default  reduce using rule 76 (elseIfPart)


state 252

    1 endls: endls . ENDL
   85 initOperatorContext: defineType operator defineType ASSIGN name endls .

    ENDL  shift, and go to state 27

    ENDL      [reduce using rule 85 (initOperatorContext)]
    $default  reduce using rule 85 (initOperatorContext)


state 253

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 256


state 254

   24 expr: expr . AND expr
   25     | expr . OR expr
   26     | expr . EQ expr
   27     | expr . NE expr
   28     | expr . GT expr
   29     | expr . GE expr
   30     | expr . LT expr
   31     | expr . LE expr
   32     | expr . PLUS expr
   33     | expr . MINUS expr
   34     | expr . MULT expr
   35     | expr . DIVIDE expr
   36     | expr . MODULUS expr
  140 switchStat: CASE LPAREN expr . RPAREN @9 subSpace

    OR       shift, and go to state 118
    AND      shift, and go to state 119
    NE       shift, and go to state 120
    EQ       shift, and go to state 121
    GE       shift, and go to state 122
    GT       shift, and go to state 123
    LE       shift, and go to state 124
    LT       shift, and go to state 125
    MINUS    shift, and go to state 126
    PLUS     shift, and go to state 127
    MODULUS  shift, and go to state 128
    DIVIDE   shift, and go to state 129
    MULT     shift, and go to state 130
    RPAREN   shift, and go to state 257


state 255

  142 switchStat: DEFAULT @10 subSpace .

    $default  reduce using rule 142 (switchStat)


state 256

   53 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN subSpace .

    $default  reduce using rule 53 (defineFor)


state 257

  140 switchStat: CASE LPAREN expr RPAREN . @9 subSpace

    $default  reduce using rule 139 (@9)

    @9  go to state 258


state 258

  140 switchStat: CASE LPAREN expr RPAREN @9 . subSpace

    ENDL    shift, and go to state 2
    LBRACE  shift, and go to state 182

    endls     go to state 183
    subSpace  go to state 259


state 259

  140 switchStat: CASE LPAREN expr RPAREN @9 subSpace .

    $default  reduce using rule 140 (switchStat)
