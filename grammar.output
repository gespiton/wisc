Useless nonterminals

   typeListP
   typeList


Useless rules

   36 typeListP: typeListP list defineType
   37          | defineType

   38 typeList: /* empty */
   39         | typeListP


State 4 conflicts: 1 shift/reduce
State 35 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 endls: endls ENDL
    2      | ENDL

    3 endc: SEMICOLON
    4     | endls

    5 list: COLON
    6     | list endls

    7 name: NAME

    8 program: /* empty */
    9        | stats

   10 expr: STRING
   11     | VALUE_VOID
   12     | VALUE_BOOLEAN
   13     | INT
   14     | NUMBER
   15     | defineIden

   16 @1: /* empty */

   17 defineFunc: defineType name funcHeaderV @1 subSpace

   18 funcHeaderV: RPAREN paramList LPAREN

   19 defineIden: name

   20 assignment: defineIden ASSIGN expr

   21 defineParam: defineType name
   22            | defineType name ASSIGN expr

   23 paramListP: paramListP list defineParam
   24           | defineParam

   25 paramList: /* empty */
   26          | paramListP

   27 subSpace: RBRACE stats LBRACE

   28 stats: stats stat
   29      | stat

   30 stat: endc
   31     | defineFunc endc
   32     | defineVariale endc
   33     | assignment endc

   34 defineType: name

   35 defineVariale: paramListP


Terminals, with rules where they appear

$end (0) 0
error (256)
NAME (258) 7
ENDL (259) 1 2
INT (260) 13
NUMBER (261) 14
STRING (262) 10
VALUE_BOOLEAN (263) 12
VALUE_VOID (264) 11
SEMICOLON (265) 3
COLON (266) 5
ASSIGN (267) 20 22
RPAREN (268) 18
LPAREN (269) 18
RBRACE (270) 27
LBRACE (271) 27


Nonterminals, with rules where they appear

$accept (17)
    on left: 0
endls (18)
    on left: 1 2, on right: 1 4 6
endc (19)
    on left: 3 4, on right: 30 31 32 33
list (20)
    on left: 5 6, on right: 6 23
name (21)
    on left: 7, on right: 17 19 21 22 34
program (22)
    on left: 8 9, on right: 0
expr (23)
    on left: 10 11 12 13 14 15, on right: 20 22
defineFunc (24)
    on left: 17, on right: 31
@1 (25)
    on left: 16, on right: 17
funcHeaderV (26)
    on left: 18, on right: 17
defineIden (27)
    on left: 19, on right: 15 20
assignment (28)
    on left: 20, on right: 33
defineParam (29)
    on left: 21 22, on right: 23 24
paramListP (30)
    on left: 23 24, on right: 23 26 35
paramList (31)
    on left: 25 26, on right: 18
subSpace (32)
    on left: 27, on right: 17
stats (33)
    on left: 28 29, on right: 9 27 28
stat (34)
    on left: 30 31 32 33, on right: 28 29
defineType (35)
    on left: 34, on right: 17 21 22
defineVariale (36)
    on left: 35, on right: 32


state 0

    0 $accept: . program $end

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 8 (program)

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    program        go to state 7
    defineFunc     go to state 8
    defineIden     go to state 9
    assignment     go to state 10
    defineParam    go to state 11
    paramListP     go to state 12
    stats          go to state 13
    stat           go to state 14
    defineType     go to state 15
    defineVariale  go to state 16


state 1

    7 name: NAME .

    $default  reduce using rule 7 (name)


state 2

    2 endls: ENDL .

    $default  reduce using rule 2 (endls)


state 3

    3 endc: SEMICOLON .

    $default  reduce using rule 3 (endc)


state 4

    1 endls: endls . ENDL
    4 endc: endls .

    ENDL  shift, and go to state 17

    ENDL      [reduce using rule 4 (endc)]
    $default  reduce using rule 4 (endc)


state 5

   30 stat: endc .

    $default  reduce using rule 30 (stat)


state 6

   19 defineIden: name .
   34 defineType: name .

    NAME      reduce using rule 34 (defineType)
    $default  reduce using rule 19 (defineIden)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 18


state 8

   31 stat: defineFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 19


state 9

   20 assignment: defineIden . ASSIGN expr

    ASSIGN  shift, and go to state 20


state 10

   33 stat: assignment . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 21


state 11

   24 paramListP: defineParam .

    $default  reduce using rule 24 (paramListP)


state 12

   23 paramListP: paramListP . list defineParam
   35 defineVariale: paramListP .

    COLON  shift, and go to state 22

    $default  reduce using rule 35 (defineVariale)

    list  go to state 23


state 13

    9 program: stats .
   28 stats: stats . stat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 9 (program)

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    defineFunc     go to state 8
    defineIden     go to state 9
    assignment     go to state 10
    defineParam    go to state 11
    paramListP     go to state 12
    stat           go to state 24
    defineType     go to state 15
    defineVariale  go to state 16


state 14

   29 stats: stat .

    $default  reduce using rule 29 (stats)


state 15

   17 defineFunc: defineType . name funcHeaderV @1 subSpace
   21 defineParam: defineType . name
   22            | defineType . name ASSIGN expr

    NAME  shift, and go to state 1

    name  go to state 25


state 16

   32 stat: defineVariale . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 26


state 17

    1 endls: endls ENDL .

    $default  reduce using rule 1 (endls)


state 18

    0 $accept: program $end .

    $default  accept


state 19

   31 stat: defineFunc endc .

    $default  reduce using rule 31 (stat)


state 20

   20 assignment: defineIden ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 27
    NUMBER         shift, and go to state 28
    STRING         shift, and go to state 29
    VALUE_BOOLEAN  shift, and go to state 30
    VALUE_VOID     shift, and go to state 31

    name        go to state 32
    expr        go to state 33
    defineIden  go to state 34


state 21

   33 stat: assignment endc .

    $default  reduce using rule 33 (stat)


state 22

    5 list: COLON .

    $default  reduce using rule 5 (list)


state 23

    6 list: list . endls
   23 paramListP: paramListP list . defineParam

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 2

    endls        go to state 35
    name         go to state 36
    defineParam  go to state 37
    defineType   go to state 38


state 24

   28 stats: stats stat .

    $default  reduce using rule 28 (stats)


state 25

   17 defineFunc: defineType name . funcHeaderV @1 subSpace
   21 defineParam: defineType name .
   22            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 39
    RPAREN  shift, and go to state 40

    $default  reduce using rule 21 (defineParam)

    funcHeaderV  go to state 41


state 26

   32 stat: defineVariale endc .

    $default  reduce using rule 32 (stat)


state 27

   13 expr: INT .

    $default  reduce using rule 13 (expr)


state 28

   14 expr: NUMBER .

    $default  reduce using rule 14 (expr)


state 29

   10 expr: STRING .

    $default  reduce using rule 10 (expr)


state 30

   12 expr: VALUE_BOOLEAN .

    $default  reduce using rule 12 (expr)


state 31

   11 expr: VALUE_VOID .

    $default  reduce using rule 11 (expr)


state 32

   19 defineIden: name .

    $default  reduce using rule 19 (defineIden)


state 33

   20 assignment: defineIden ASSIGN expr .

    $default  reduce using rule 20 (assignment)


state 34

   15 expr: defineIden .

    $default  reduce using rule 15 (expr)


state 35

    1 endls: endls . ENDL
    6 list: list endls .

    ENDL  shift, and go to state 17

    ENDL      [reduce using rule 6 (list)]
    $default  reduce using rule 6 (list)


state 36

   34 defineType: name .

    $default  reduce using rule 34 (defineType)


state 37

   23 paramListP: paramListP list defineParam .

    $default  reduce using rule 23 (paramListP)


state 38

   21 defineParam: defineType . name
   22            | defineType . name ASSIGN expr

    NAME  shift, and go to state 1

    name  go to state 42


state 39

   22 defineParam: defineType name ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 27
    NUMBER         shift, and go to state 28
    STRING         shift, and go to state 29
    VALUE_BOOLEAN  shift, and go to state 30
    VALUE_VOID     shift, and go to state 31

    name        go to state 32
    expr        go to state 43
    defineIden  go to state 34


state 40

   18 funcHeaderV: RPAREN . paramList LPAREN

    NAME  shift, and go to state 1

    $default  reduce using rule 25 (paramList)

    name         go to state 36
    defineParam  go to state 11
    paramListP   go to state 44
    paramList    go to state 45
    defineType   go to state 38


state 41

   17 defineFunc: defineType name funcHeaderV . @1 subSpace

    $default  reduce using rule 16 (@1)

    @1  go to state 46


state 42

   21 defineParam: defineType name .
   22            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 39

    $default  reduce using rule 21 (defineParam)


state 43

   22 defineParam: defineType name ASSIGN expr .

    $default  reduce using rule 22 (defineParam)


state 44

   23 paramListP: paramListP . list defineParam
   26 paramList: paramListP .

    COLON  shift, and go to state 22

    $default  reduce using rule 26 (paramList)

    list  go to state 23


state 45

   18 funcHeaderV: RPAREN paramList . LPAREN

    LPAREN  shift, and go to state 47


state 46

   17 defineFunc: defineType name funcHeaderV @1 . subSpace

    RBRACE  shift, and go to state 48

    subSpace  go to state 49


state 47

   18 funcHeaderV: RPAREN paramList LPAREN .

    $default  reduce using rule 18 (funcHeaderV)


state 48

   27 subSpace: RBRACE . stats LBRACE

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    defineFunc     go to state 8
    defineIden     go to state 9
    assignment     go to state 10
    defineParam    go to state 11
    paramListP     go to state 12
    stats          go to state 50
    stat           go to state 14
    defineType     go to state 15
    defineVariale  go to state 16


state 49

   17 defineFunc: defineType name funcHeaderV @1 subSpace .

    $default  reduce using rule 17 (defineFunc)


state 50

   27 subSpace: RBRACE stats . LBRACE
   28 stats: stats . stat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    LBRACE     shift, and go to state 51

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    defineFunc     go to state 8
    defineIden     go to state 9
    assignment     go to state 10
    defineParam    go to state 11
    paramListP     go to state 12
    stat           go to state 24
    defineType     go to state 15
    defineVariale  go to state 16


state 51

   27 subSpace: RBRACE stats LBRACE .

    $default  reduce using rule 27 (subSpace)
