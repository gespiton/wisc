State 4 conflicts: 1 shift/reduce
State 13 conflicts: 4 shift/reduce
State 23 conflicts: 6 reduce/reduce
State 35 conflicts: 1 shift/reduce
State 86 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 endls: endls ENDL
    2      | ENDL

    3 endc: SEMICOLON
    4     | endls

    5 list: COMMA
    6     | list endls

    7 name: NAME

    8 program: /* empty */
    9        | space

   10 expr: STRING
   11     | VALUE_VOID
   12     | VALUE_BOOLEAN
   13     | INT
   14     | NUMBER
   15     | defineIden
   16     | funcExpr

   17 exprList: /* empty */
   18         | exprList list expr
   19         | expr

   20 @1: /* empty */

   21 defineFunc: defineType name funcHeaderV @1 subSpace

   22 @2: /* empty */

   23 funcExpr: funcHeaderE @2 subSpace

   24 funcHeaderV: RPAREN paramList LPAREN

   25 @3: /* empty */

   26 funcHeaderE: RPAREN @3 paramList LPAREN COLON defineType

   27 funcType: defineType COLON RPAREN typeList LPAREN

   28 defineIden: name
   29           | idenFunc

   30 idenFunc: defineIden RPAREN exprList LPAREN

   31 assignment: defineIden ASSIGN expr

   32 defineParam: defineType name
   33            | defineType name ASSIGN expr

   34 paramListP: paramListP list defineParam
   35           | defineParam

   36 paramList: /* empty */
   37          | paramListP

   38 subSpace: RBRACE space LBRACE
   39         | endls subSpace

   40 space: defineStats stats

   41 controlSpace: RETURN expr
   42             | RETURN

   43 stats: /* empty */
   44      | stats stat
   45      | stat

   46 stat: endc
   47     | assignment endc
   48     | controlSpace endc
   49     | idenFunc endc

   50 defineStats: defineStats defineStat
   51            | defineStat

   52 defineStat: endc
   53           | defineFunc endc
   54           | defineVariale endc

   55 defineType: name
   56           | funcType

   57 typeListP: typeListP list defineType
   58          | defineType

   59 typeList: /* empty */
   60         | typeListP

   61 defineVariale: paramListP


Terminals, with rules where they appear

$end (0) 0
error (256)
NAME (258) 7
ENDL (259) 1 2
INT (260) 13
NUMBER (261) 14
STRING (262) 10
VALUE_BOOLEAN (263) 12
VALUE_VOID (264) 11
SEMICOLON (265) 3
COLON (266) 26 27
ASSIGN (267) 31 33
RPAREN (268) 24 26 27 30
LPAREN (269) 24 26 27 30
RBRACE (270) 38
LBRACE (271) 38
COMMA (272) 5
RETURN (273) 41 42


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
endls (20)
    on left: 1 2, on right: 1 4 6 39
endc (21)
    on left: 3 4, on right: 46 47 48 49 52 53 54
list (22)
    on left: 5 6, on right: 6 18 34 57
name (23)
    on left: 7, on right: 21 28 32 33 55
program (24)
    on left: 8 9, on right: 0
expr (25)
    on left: 10 11 12 13 14 15 16, on right: 18 19 31 33 41
exprList (26)
    on left: 17 18 19, on right: 18 30
defineFunc (27)
    on left: 21, on right: 53
@1 (28)
    on left: 20, on right: 21
funcExpr (29)
    on left: 23, on right: 16
@2 (30)
    on left: 22, on right: 23
funcHeaderV (31)
    on left: 24, on right: 21
funcHeaderE (32)
    on left: 26, on right: 23
@3 (33)
    on left: 25, on right: 26
funcType (34)
    on left: 27, on right: 56
defineIden (35)
    on left: 28 29, on right: 15 30 31
idenFunc (36)
    on left: 30, on right: 29 49
assignment (37)
    on left: 31, on right: 47
defineParam (38)
    on left: 32 33, on right: 34 35
paramListP (39)
    on left: 34 35, on right: 34 37 61
paramList (40)
    on left: 36 37, on right: 24 26
subSpace (41)
    on left: 38 39, on right: 21 23 39
space (42)
    on left: 40, on right: 9 38
controlSpace (43)
    on left: 41 42, on right: 48
stats (44)
    on left: 43 44 45, on right: 40 44
stat (45)
    on left: 46 47 48 49, on right: 44 45
defineStats (46)
    on left: 50 51, on right: 40 50
defineStat (47)
    on left: 52 53 54, on right: 50 51
defineType (48)
    on left: 55 56, on right: 21 26 27 32 33 57 58
typeListP (49)
    on left: 57 58, on right: 57 60
typeList (50)
    on left: 59 60, on right: 27
defineVariale (51)
    on left: 61, on right: 54


state 0

    0 $accept: . program $end

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 8 (program)

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    program        go to state 7
    defineFunc     go to state 8
    funcType       go to state 9
    defineParam    go to state 10
    paramListP     go to state 11
    space          go to state 12
    defineStats    go to state 13
    defineStat     go to state 14
    defineType     go to state 15
    defineVariale  go to state 16


state 1

    7 name: NAME .

    $default  reduce using rule 7 (name)


state 2

    2 endls: ENDL .

    $default  reduce using rule 2 (endls)


state 3

    3 endc: SEMICOLON .

    $default  reduce using rule 3 (endc)


state 4

    1 endls: endls . ENDL
    4 endc: endls .

    ENDL  shift, and go to state 17

    ENDL      [reduce using rule 4 (endc)]
    $default  reduce using rule 4 (endc)


state 5

   52 defineStat: endc .

    $default  reduce using rule 52 (defineStat)


state 6

   55 defineType: name .

    $default  reduce using rule 55 (defineType)


state 7

    0 $accept: program . $end

    $end  shift, and go to state 18


state 8

   53 defineStat: defineFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 19


state 9

   56 defineType: funcType .

    $default  reduce using rule 56 (defineType)


state 10

   35 paramListP: defineParam .

    $default  reduce using rule 35 (paramListP)


state 11

   34 paramListP: paramListP . list defineParam
   61 defineVariale: paramListP .

    COMMA  shift, and go to state 20

    $default  reduce using rule 61 (defineVariale)

    list  go to state 21


state 12

    9 program: space .

    $default  reduce using rule 9 (program)


state 13

   40 space: defineStats . stats
   50 defineStats: defineStats . defineStat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    RETURN     shift, and go to state 22

    NAME       [reduce using rule 43 (stats)]
    ENDL       [reduce using rule 43 (stats)]
    SEMICOLON  [reduce using rule 43 (stats)]
    RETURN     [reduce using rule 43 (stats)]
    $default   reduce using rule 43 (stats)

    endls          go to state 4
    endc           go to state 23
    name           go to state 24
    defineFunc     go to state 8
    funcType       go to state 9
    defineIden     go to state 25
    idenFunc       go to state 26
    assignment     go to state 27
    defineParam    go to state 10
    paramListP     go to state 11
    controlSpace   go to state 28
    stats          go to state 29
    stat           go to state 30
    defineStat     go to state 31
    defineType     go to state 15
    defineVariale  go to state 16


state 14

   51 defineStats: defineStat .

    $default  reduce using rule 51 (defineStats)


state 15

   21 defineFunc: defineType . name funcHeaderV @1 subSpace
   27 funcType: defineType . COLON RPAREN typeList LPAREN
   32 defineParam: defineType . name
   33            | defineType . name ASSIGN expr

    NAME   shift, and go to state 1
    COLON  shift, and go to state 32

    name  go to state 33


state 16

   54 defineStat: defineVariale . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 34


state 17

    1 endls: endls ENDL .

    $default  reduce using rule 1 (endls)


state 18

    0 $accept: program $end .

    $default  accept


state 19

   53 defineStat: defineFunc endc .

    $default  reduce using rule 53 (defineStat)


state 20

    5 list: COMMA .

    $default  reduce using rule 5 (list)


state 21

    6 list: list . endls
   34 paramListP: paramListP list . defineParam

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 2

    endls        go to state 35
    name         go to state 6
    funcType     go to state 9
    defineParam  go to state 36
    defineType   go to state 37


state 22

   41 controlSpace: RETURN . expr
   42             | RETURN .

    NAME           shift, and go to state 1
    INT            shift, and go to state 38
    NUMBER         shift, and go to state 39
    STRING         shift, and go to state 40
    VALUE_BOOLEAN  shift, and go to state 41
    VALUE_VOID     shift, and go to state 42
    RPAREN         shift, and go to state 43

    $default  reduce using rule 42 (controlSpace)

    name         go to state 44
    expr         go to state 45
    funcExpr     go to state 46
    funcHeaderE  go to state 47
    defineIden   go to state 48
    idenFunc     go to state 49


state 23

   46 stat: endc .
   52 defineStat: endc .

    $end       reduce using rule 46 (stat)
    $end       [reduce using rule 52 (defineStat)]
    NAME       reduce using rule 46 (stat)
    NAME       [reduce using rule 52 (defineStat)]
    ENDL       reduce using rule 46 (stat)
    ENDL       [reduce using rule 52 (defineStat)]
    SEMICOLON  reduce using rule 46 (stat)
    SEMICOLON  [reduce using rule 52 (defineStat)]
    LBRACE     reduce using rule 46 (stat)
    LBRACE     [reduce using rule 52 (defineStat)]
    RETURN     reduce using rule 46 (stat)
    RETURN     [reduce using rule 52 (defineStat)]
    $default   reduce using rule 46 (stat)


state 24

   28 defineIden: name .
   55 defineType: name .

    NAME      reduce using rule 55 (defineType)
    COLON     reduce using rule 55 (defineType)
    $default  reduce using rule 28 (defineIden)


state 25

   30 idenFunc: defineIden . RPAREN exprList LPAREN
   31 assignment: defineIden . ASSIGN expr

    ASSIGN  shift, and go to state 50
    RPAREN  shift, and go to state 51


state 26

   29 defineIden: idenFunc .
   49 stat: idenFunc . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    $default  reduce using rule 29 (defineIden)

    endls  go to state 4
    endc   go to state 52


state 27

   47 stat: assignment . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 53


state 28

   48 stat: controlSpace . endc

    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls  go to state 4
    endc   go to state 54


state 29

   40 space: defineStats stats .
   44 stats: stats . stat

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3
    RETURN     shift, and go to state 22

    $default  reduce using rule 40 (space)

    endls         go to state 4
    endc          go to state 55
    name          go to state 44
    defineIden    go to state 25
    idenFunc      go to state 26
    assignment    go to state 27
    controlSpace  go to state 28
    stat          go to state 56


state 30

   45 stats: stat .

    $default  reduce using rule 45 (stats)


state 31

   50 defineStats: defineStats defineStat .

    $default  reduce using rule 50 (defineStats)


state 32

   27 funcType: defineType COLON . RPAREN typeList LPAREN

    RPAREN  shift, and go to state 57


state 33

   21 defineFunc: defineType name . funcHeaderV @1 subSpace
   32 defineParam: defineType name .
   33            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 58
    RPAREN  shift, and go to state 59

    $default  reduce using rule 32 (defineParam)

    funcHeaderV  go to state 60


state 34

   54 defineStat: defineVariale endc .

    $default  reduce using rule 54 (defineStat)


state 35

    1 endls: endls . ENDL
    6 list: list endls .

    ENDL  shift, and go to state 17

    ENDL      [reduce using rule 6 (list)]
    $default  reduce using rule 6 (list)


state 36

   34 paramListP: paramListP list defineParam .

    $default  reduce using rule 34 (paramListP)


state 37

   27 funcType: defineType . COLON RPAREN typeList LPAREN
   32 defineParam: defineType . name
   33            | defineType . name ASSIGN expr

    NAME   shift, and go to state 1
    COLON  shift, and go to state 32

    name  go to state 61


state 38

   13 expr: INT .

    $default  reduce using rule 13 (expr)


state 39

   14 expr: NUMBER .

    $default  reduce using rule 14 (expr)


state 40

   10 expr: STRING .

    $default  reduce using rule 10 (expr)


state 41

   12 expr: VALUE_BOOLEAN .

    $default  reduce using rule 12 (expr)


state 42

   11 expr: VALUE_VOID .

    $default  reduce using rule 11 (expr)


state 43

   26 funcHeaderE: RPAREN . @3 paramList LPAREN COLON defineType

    $default  reduce using rule 25 (@3)

    @3  go to state 62


state 44

   28 defineIden: name .

    $default  reduce using rule 28 (defineIden)


state 45

   41 controlSpace: RETURN expr .

    $default  reduce using rule 41 (controlSpace)


state 46

   16 expr: funcExpr .

    $default  reduce using rule 16 (expr)


state 47

   23 funcExpr: funcHeaderE . @2 subSpace

    $default  reduce using rule 22 (@2)

    @2  go to state 63


state 48

   15 expr: defineIden .
   30 idenFunc: defineIden . RPAREN exprList LPAREN

    RPAREN  shift, and go to state 51

    $default  reduce using rule 15 (expr)


state 49

   29 defineIden: idenFunc .

    $default  reduce using rule 29 (defineIden)


state 50

   31 assignment: defineIden ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 38
    NUMBER         shift, and go to state 39
    STRING         shift, and go to state 40
    VALUE_BOOLEAN  shift, and go to state 41
    VALUE_VOID     shift, and go to state 42
    RPAREN         shift, and go to state 43

    name         go to state 44
    expr         go to state 64
    funcExpr     go to state 46
    funcHeaderE  go to state 47
    defineIden   go to state 48
    idenFunc     go to state 49


state 51

   30 idenFunc: defineIden RPAREN . exprList LPAREN

    NAME           shift, and go to state 1
    INT            shift, and go to state 38
    NUMBER         shift, and go to state 39
    STRING         shift, and go to state 40
    VALUE_BOOLEAN  shift, and go to state 41
    VALUE_VOID     shift, and go to state 42
    RPAREN         shift, and go to state 43

    $default  reduce using rule 17 (exprList)

    name         go to state 44
    expr         go to state 65
    exprList     go to state 66
    funcExpr     go to state 46
    funcHeaderE  go to state 47
    defineIden   go to state 48
    idenFunc     go to state 49


state 52

   49 stat: idenFunc endc .

    $default  reduce using rule 49 (stat)


state 53

   47 stat: assignment endc .

    $default  reduce using rule 47 (stat)


state 54

   48 stat: controlSpace endc .

    $default  reduce using rule 48 (stat)


state 55

   46 stat: endc .

    $default  reduce using rule 46 (stat)


state 56

   44 stats: stats stat .

    $default  reduce using rule 44 (stats)


state 57

   27 funcType: defineType COLON RPAREN . typeList LPAREN

    NAME  shift, and go to state 1

    $default  reduce using rule 59 (typeList)

    name        go to state 6
    funcType    go to state 9
    defineType  go to state 67
    typeListP   go to state 68
    typeList    go to state 69


state 58

   33 defineParam: defineType name ASSIGN . expr

    NAME           shift, and go to state 1
    INT            shift, and go to state 38
    NUMBER         shift, and go to state 39
    STRING         shift, and go to state 40
    VALUE_BOOLEAN  shift, and go to state 41
    VALUE_VOID     shift, and go to state 42
    RPAREN         shift, and go to state 43

    name         go to state 44
    expr         go to state 70
    funcExpr     go to state 46
    funcHeaderE  go to state 47
    defineIden   go to state 48
    idenFunc     go to state 49


state 59

   24 funcHeaderV: RPAREN . paramList LPAREN

    NAME  shift, and go to state 1

    $default  reduce using rule 36 (paramList)

    name         go to state 6
    funcType     go to state 9
    defineParam  go to state 10
    paramListP   go to state 71
    paramList    go to state 72
    defineType   go to state 37


state 60

   21 defineFunc: defineType name funcHeaderV . @1 subSpace

    $default  reduce using rule 20 (@1)

    @1  go to state 73


state 61

   32 defineParam: defineType name .
   33            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 58

    $default  reduce using rule 32 (defineParam)


state 62

   26 funcHeaderE: RPAREN @3 . paramList LPAREN COLON defineType

    NAME  shift, and go to state 1

    $default  reduce using rule 36 (paramList)

    name         go to state 6
    funcType     go to state 9
    defineParam  go to state 10
    paramListP   go to state 71
    paramList    go to state 74
    defineType   go to state 37


state 63

   23 funcExpr: funcHeaderE @2 . subSpace

    ENDL    shift, and go to state 2
    RBRACE  shift, and go to state 75

    endls     go to state 76
    subSpace  go to state 77


state 64

   31 assignment: defineIden ASSIGN expr .

    $default  reduce using rule 31 (assignment)


state 65

   19 exprList: expr .

    $default  reduce using rule 19 (exprList)


state 66

   18 exprList: exprList . list expr
   30 idenFunc: defineIden RPAREN exprList . LPAREN

    LPAREN  shift, and go to state 78
    COMMA   shift, and go to state 20

    list  go to state 79


state 67

   27 funcType: defineType . COLON RPAREN typeList LPAREN
   58 typeListP: defineType .

    COLON  shift, and go to state 32

    $default  reduce using rule 58 (typeListP)


state 68

   57 typeListP: typeListP . list defineType
   60 typeList: typeListP .

    COMMA  shift, and go to state 20

    $default  reduce using rule 60 (typeList)

    list  go to state 80


state 69

   27 funcType: defineType COLON RPAREN typeList . LPAREN

    LPAREN  shift, and go to state 81


state 70

   33 defineParam: defineType name ASSIGN expr .

    $default  reduce using rule 33 (defineParam)


state 71

   34 paramListP: paramListP . list defineParam
   37 paramList: paramListP .

    COMMA  shift, and go to state 20

    $default  reduce using rule 37 (paramList)

    list  go to state 21


state 72

   24 funcHeaderV: RPAREN paramList . LPAREN

    LPAREN  shift, and go to state 82


state 73

   21 defineFunc: defineType name funcHeaderV @1 . subSpace

    ENDL    shift, and go to state 2
    RBRACE  shift, and go to state 75

    endls     go to state 76
    subSpace  go to state 83


state 74

   26 funcHeaderE: RPAREN @3 paramList . LPAREN COLON defineType

    LPAREN  shift, and go to state 84


state 75

   38 subSpace: RBRACE . space LBRACE

    NAME       shift, and go to state 1
    ENDL       shift, and go to state 2
    SEMICOLON  shift, and go to state 3

    endls          go to state 4
    endc           go to state 5
    name           go to state 6
    defineFunc     go to state 8
    funcType       go to state 9
    defineParam    go to state 10
    paramListP     go to state 11
    space          go to state 85
    defineStats    go to state 13
    defineStat     go to state 14
    defineType     go to state 15
    defineVariale  go to state 16


state 76

    1 endls: endls . ENDL
   39 subSpace: endls . subSpace

    ENDL    shift, and go to state 86
    RBRACE  shift, and go to state 75

    endls     go to state 76
    subSpace  go to state 87


state 77

   23 funcExpr: funcHeaderE @2 subSpace .

    $default  reduce using rule 23 (funcExpr)


state 78

   30 idenFunc: defineIden RPAREN exprList LPAREN .

    $default  reduce using rule 30 (idenFunc)


state 79

    6 list: list . endls
   18 exprList: exprList list . expr

    NAME           shift, and go to state 1
    ENDL           shift, and go to state 2
    INT            shift, and go to state 38
    NUMBER         shift, and go to state 39
    STRING         shift, and go to state 40
    VALUE_BOOLEAN  shift, and go to state 41
    VALUE_VOID     shift, and go to state 42
    RPAREN         shift, and go to state 43

    endls        go to state 35
    name         go to state 44
    expr         go to state 88
    funcExpr     go to state 46
    funcHeaderE  go to state 47
    defineIden   go to state 48
    idenFunc     go to state 49


state 80

    6 list: list . endls
   57 typeListP: typeListP list . defineType

    NAME  shift, and go to state 1
    ENDL  shift, and go to state 2

    endls       go to state 35
    name        go to state 6
    funcType    go to state 9
    defineType  go to state 89


state 81

   27 funcType: defineType COLON RPAREN typeList LPAREN .

    $default  reduce using rule 27 (funcType)


state 82

   24 funcHeaderV: RPAREN paramList LPAREN .

    $default  reduce using rule 24 (funcHeaderV)


state 83

   21 defineFunc: defineType name funcHeaderV @1 subSpace .

    $default  reduce using rule 21 (defineFunc)


state 84

   26 funcHeaderE: RPAREN @3 paramList LPAREN . COLON defineType

    COLON  shift, and go to state 90


state 85

   38 subSpace: RBRACE space . LBRACE

    LBRACE  shift, and go to state 91


state 86

    1 endls: endls ENDL .
    2      | ENDL .

    ENDL      reduce using rule 1 (endls)
    ENDL      [reduce using rule 2 (endls)]
    RBRACE    reduce using rule 1 (endls)
    RBRACE    [reduce using rule 2 (endls)]
    $default  reduce using rule 1 (endls)


state 87

   39 subSpace: endls subSpace .

    $default  reduce using rule 39 (subSpace)


state 88

   18 exprList: exprList list expr .

    $default  reduce using rule 18 (exprList)


state 89

   27 funcType: defineType . COLON RPAREN typeList LPAREN
   57 typeListP: typeListP list defineType .

    COLON  shift, and go to state 32

    $default  reduce using rule 57 (typeListP)


state 90

   26 funcHeaderE: RPAREN @3 paramList LPAREN COLON . defineType

    NAME  shift, and go to state 1

    name        go to state 6
    funcType    go to state 9
    defineType  go to state 92


state 91

   38 subSpace: RBRACE space LBRACE .

    $default  reduce using rule 38 (subSpace)


state 92

   26 funcHeaderE: RPAREN @3 paramList LPAREN COLON defineType .
   27 funcType: defineType . COLON RPAREN typeList LPAREN

    COLON  shift, and go to state 32

    $default  reduce using rule 26 (funcHeaderE)
