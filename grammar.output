Terminals which are not used

   RARROW
   EPLUS
   DPLUS
   EMINUS
   DMINUS
   EMULT
   EDIVIDE
   EMODULUS
   OPPOSITE


State 0 conflicts: 1 shift/reduce, 1 reduce/reduce
State 5 conflicts: 13 shift/reduce, 2 reduce/reduce
State 15 conflicts: 10 shift/reduce
State 23 conflicts: 1 shift/reduce
State 32 conflicts: 3 reduce/reduce
State 36 conflicts: 2 shift/reduce, 1 reduce/reduce
State 40 conflicts: 1 shift/reduce
State 42 conflicts: 2 shift/reduce
State 50 conflicts: 1 shift/reduce
State 67 conflicts: 2 shift/reduce
State 68 conflicts: 11 shift/reduce
State 72 conflicts: 13 shift/reduce
State 75 conflicts: 3 shift/reduce
State 78 conflicts: 1 shift/reduce
State 81 conflicts: 1 shift/reduce
State 85 conflicts: 11 shift/reduce
State 88 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce, 1 reduce/reduce
State 98 conflicts: 1 shift/reduce
State 99 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 107 conflicts: 2 shift/reduce
State 111 conflicts: 11 shift/reduce
State 127 conflicts: 5 shift/reduce
State 129 conflicts: 1 shift/reduce
State 136 conflicts: 13 shift/reduce
State 137 conflicts: 10 shift/reduce
State 138 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce
State 145 conflicts: 1 shift/reduce
State 150 conflicts: 1 shift/reduce
State 152 conflicts: 1 shift/reduce
State 159 conflicts: 39 reduce/reduce
State 160 conflicts: 2 shift/reduce, 1 reduce/reduce
State 163 conflicts: 1 shift/reduce, 1 reduce/reduce
State 166 conflicts: 2 shift/reduce, 10 reduce/reduce
State 168 conflicts: 1 shift/reduce, 10 reduce/reduce
State 183 conflicts: 4 shift/reduce
State 184 conflicts: 5 shift/reduce, 31 reduce/reduce
State 188 conflicts: 1 shift/reduce
State 189 conflicts: 1 shift/reduce
State 197 conflicts: 5 shift/reduce
State 203 conflicts: 13 shift/reduce
State 205 conflicts: 5 shift/reduce
State 223 conflicts: 13 shift/reduce, 3 reduce/reduce
State 225 conflicts: 5 shift/reduce
State 227 conflicts: 5 shift/reduce
State 239 conflicts: 2 shift/reduce
State 244 conflicts: 3 shift/reduce
State 252 conflicts: 1 shift/reduce, 1 reduce/reduce
State 257 conflicts: 1 shift/reduce
State 258 conflicts: 4 shift/reduce
State 261 conflicts: 5 shift/reduce
State 266 conflicts: 1 shift/reduce
State 270 conflicts: 1 shift/reduce
State 274 conflicts: 5 shift/reduce
State 277 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 endls: endls ENDL
    2      | ENDL

    3 endlsn: /* empty */
    4       | endls

    5 endc: SEMICOLON
    6     | endls

    7 list: COMMA
    8     | list endls

    9 lists: /* empty */
   10      | list
   11      | endls

   12 name: NAME

   13 program: /* empty */
   14        | init
   15        | typedefs stats

   16 arrayType: defineType BRACKET

   17 arrayExpr: LBRACKET exprList RBRACKET

   18 dictType: LBRACE defineType RBRACE

   19 dictExpr: LBRACE dictContext RBRACE

   20 dictContext: /* empty */
   21            | dictContext lists dictList
   22            | dictList
   23            | endls dictContext
   24            | dictContext endls

   25 dictList: name expr

   26 expr: expr AND expr
   27     | expr OR expr
   28     | expr EQ expr
   29     | expr NE expr
   30     | expr GT expr
   31     | expr GE expr
   32     | expr LT expr
   33     | expr LE expr
   34     | expr PLUS expr
   35     | expr MINUS expr
   36     | expr MULT expr
   37     | expr DIVIDE expr
   38     | expr MODULUS expr
   39     | RPAREN expr LPAREN
   40     | STRING
   41     | VALUE_VOID
   42     | VALUE_BOOLEAN
   43     | INT
   44     | NUMBER
   45     | defineIden
   46     | funcExpr
   47     | arrayExpr
   48     | dictExpr

   49 exprList: /* empty */
   50         | exprList lists expr
   51         | expr
   52         | endls exprList
   53         | exprList endls

   54 @1: /* empty */

   55 @2: /* empty */

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

   57 @3: /* empty */

   58 defineFunc: defineType name funcHeaderV @3 subSpace

   59 @4: /* empty */

   60 funcExpr: funcHeaderE @4 subSpace

   61 funcHeaderV: LPAREN paramList RPAREN

   62 @5: /* empty */

   63 funcHeaderE: LPAREN @5 paramList RPAREN COLON defineType

   64 funcType: defineType COLON LPAREN typeList RPAREN

   65 defineIden: name
   66           | idenFunc
   67           | idenBracket
   68           | idenTarget

   69 idenFunc: defineIden LPAREN exprList RPAREN
   70         | defineIden LPAREN RPAREN

   71 idenBracket: defineIden LBRACKET expr RBRACKET

   72 idenTarget: defineIden LT defineType GT

   73 defineIf: ifPart
   74         | ifPart elseIfParts
   75         | ifPart endlsn elsePart
   76         | ifPart endlsn elseIfParts endlsn elsePart

   77 @6: /* empty */

   78 ifPart: IF LPAREN expr RPAREN @6 subSpace

   79 elseIfParts: elseIfParts endlsn elseIfPart
   80            | elseIfPart

   81 @7: /* empty */

   82 elseIfPart: ELSE IF LPAREN expr RPAREN @7 subSpace

   83 @8: /* empty */

   84 elsePart: ELSE @8 subSpace

   85 init: DINIT endls initContext DEND

   86 initContext: /* empty */
   87            | initOperator

   88 initOperator: OPERATOR LBRACE initOperatorContexts RBRACE endls

   89 initOperatorContexts: initOperatorContexts initOperatorContext
   90                     | initOperatorContext

   91 initOperatorContext: endls
   92                    | defineType operator defineType ASSIGN name endls

   93 assignment: /* empty */
   94           | defineIden ASSIGN expr

   95 iteration: assignment
   96          | idenFunc

   97 operator: PLUS
   98         | MINUS
   99         | MULT
  100         | DIVIDE
  101         | MODULUS
  102         | EQ
  103         | NE
  104         | GT
  105         | GE
  106         | LT
  107         | LE

  108 defineParam: defineType name
  109            | defineType name ASSIGN expr

  110 paramListP: paramListP list defineParam
  111           | defineParam

  112 paramList: /* empty */
  113          | paramListP
  114          | endls paramList
  115          | paramList endls

  116 subSpace: LBRACE endlsn stats RBRACE
  117         | stat
  118         | LBRACE endlsn stat endlsn RBRACE
  119         | endls subSpace

  120 controlSpace: RETURN expr
  121             | RETURN
  122             | BREAK
  123             | CONTINUE

  124 stats: /* empty */
  125      | stats stat endc
  126      | stat endc

  127 stat: endc
  128     | iteration
  129     | controlSpace
  130     | defineStat
  131     | defineIf
  132     | defineWhile
  133     | defineFor
  134     | defineSwitch

  135 defineStat: defineFunc
  136           | defineVariale

  137 @9: /* empty */

  138 defineSwitch: SWITCH LPAREN expr RPAREN @9 switchSpace

  139 switchSpace: LBRACE switchStats RBRACE
  140            | endls switchSpace

  141 switchStats: switchStats switchStat
  142            | switchStat

  143 switchStat: /* empty */
  144           | endls

  145 @10: /* empty */

  146 switchStat: CASE LPAREN expr RPAREN @10 subSpace

  147 @11: /* empty */

  148 switchStat: DEFAULT @11 subSpace

  149 defineType: name
  150           | funcType
  151           | arrayType
  152           | dictType
  153           | LPAREN typeListM RPAREN

  154 typeListM: typeListM SOR defineType
  155          | defineType

  156 typeListP: typeListP list defineType
  157          | defineType

  158 typeList: /* empty */
  159         | typeListP

  160 typedefs: /* empty */
  161         | typedefs definTypedef endls
  162         | definTypedef endls

  163 definTypedef: TYPEDEF name defineType

  164 defineVariale: paramListP
  165              | CONST paramListP

  166 @12: /* empty */

  167 defineWhile: WHILE LPAREN expr RPAREN @12 subSpace


Terminals, with rules where they appear

$end (0) 0
error (256)
OR (258) 27
AND (259) 26
NE (260) 29 103
EQ (261) 28 102
GE (262) 31 105
GT (263) 30 72 104
LE (264) 33 107
LT (265) 32 72 106
MINUS (266) 35 98
PLUS (267) 34 97
MODULUS (268) 38 101
DIVIDE (269) 37 100
MULT (270) 36 99
NAME (271) 12
ENDL (272) 1 2
INT (273) 43
NUMBER (274) 44
STRING (275) 40
VALUE_BOOLEAN (276) 42
VALUE_VOID (277) 41
SEMICOLON (278) 5 56
COLON (279) 63 64
ASSIGN (280) 92 94 109
RPAREN (281) 39 56 61 63 64 69 70 78 82 138 146 153 167
LPAREN (282) 39 56 61 63 64 69 70 78 82 138 146 153 167
RBRACE (283) 18 19 88 116 118 139
LBRACE (284) 18 19 88 116 118 139
COMMA (285) 7
BRACKET (286) 16
RBRACKET (287) 17 71
LBRACKET (288) 17 71
DINIT (289) 85
DEND (290) 85
RETURN (291) 120 121
IF (292) 78 82
ELSE (293) 82 84
FOR (294) 56
WHILE (295) 167
SWITCH (296) 138
CASE (297) 146
DEFAULT (298) 148
BREAK (299) 122
CONTINUE (300) 123
OPERATOR (301) 88
CONST (302) 165
TYPEDEF (303) 163
SOR (304) 154
RARROW (305)
EPLUS (306)
DPLUS (307)
EMINUS (308)
DMINUS (309)
EMULT (310)
EDIVIDE (311)
EMODULUS (312)
OPPOSITE (313)


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
endls (60)
    on left: 1 2, on right: 1 4 6 8 11 23 24 52 53 85 88 91 92 114
    115 119 140 144 161 162
endlsn (61)
    on left: 3 4, on right: 75 76 79 116 118
endc (62)
    on left: 5 6, on right: 125 126 127
list (63)
    on left: 7 8, on right: 8 10 110 156
lists (64)
    on left: 9 10 11, on right: 21 50
name (65)
    on left: 12, on right: 25 58 65 92 108 109 149 163
program (66)
    on left: 13 14 15, on right: 0
arrayType (67)
    on left: 16, on right: 151
arrayExpr (68)
    on left: 17, on right: 47
dictType (69)
    on left: 18, on right: 152
dictExpr (70)
    on left: 19, on right: 48
dictContext (71)
    on left: 20 21 22 23 24, on right: 19 21 23 24
dictList (72)
    on left: 25, on right: 21 22
expr (73)
    on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44 45 46 47 48, on right: 25 26 27 28 29 30 31 32 33 34 35 36 37
    38 39 50 51 56 71 78 82 94 109 120 138 146 167
exprList (74)
    on left: 49 50 51 52 53, on right: 17 50 52 53 69
defineFor (75)
    on left: 56, on right: 133
@1 (76)
    on left: 54, on right: 56
@2 (77)
    on left: 55, on right: 56
defineFunc (78)
    on left: 58, on right: 135
@3 (79)
    on left: 57, on right: 58
funcExpr (80)
    on left: 60, on right: 46
@4 (81)
    on left: 59, on right: 60
funcHeaderV (82)
    on left: 61, on right: 58
funcHeaderE (83)
    on left: 63, on right: 60
@5 (84)
    on left: 62, on right: 63
funcType (85)
    on left: 64, on right: 150
defineIden (86)
    on left: 65 66 67 68, on right: 45 69 70 71 72 94
idenFunc (87)
    on left: 69 70, on right: 66 96
idenBracket (88)
    on left: 71, on right: 67
idenTarget (89)
    on left: 72, on right: 68
defineIf (90)
    on left: 73 74 75 76, on right: 131
ifPart (91)
    on left: 78, on right: 73 74 75 76
@6 (92)
    on left: 77, on right: 78
elseIfParts (93)
    on left: 79 80, on right: 74 76 79
elseIfPart (94)
    on left: 82, on right: 79 80
@7 (95)
    on left: 81, on right: 82
elsePart (96)
    on left: 84, on right: 75 76
@8 (97)
    on left: 83, on right: 84
init (98)
    on left: 85, on right: 14
initContext (99)
    on left: 86 87, on right: 85
initOperator (100)
    on left: 88, on right: 87
initOperatorContexts (101)
    on left: 89 90, on right: 88 89
initOperatorContext (102)
    on left: 91 92, on right: 89 90
assignment (103)
    on left: 93 94, on right: 95
iteration (104)
    on left: 95 96, on right: 56 128
operator (105)
    on left: 97 98 99 100 101 102 103 104 105 106 107,
    on right: 92
defineParam (106)
    on left: 108 109, on right: 110 111
paramListP (107)
    on left: 110 111, on right: 110 113 164 165
paramList (108)
    on left: 112 113 114 115, on right: 56 61 63 114 115
subSpace (109)
    on left: 116 117 118 119, on right: 56 58 60 78 82 84 119 146 148
    167
controlSpace (110)
    on left: 120 121 122 123, on right: 129
stats (111)
    on left: 124 125 126, on right: 15 116 125
stat (112)
    on left: 127 128 129 130 131 132 133 134, on right: 117 118 125
    126
defineStat (113)
    on left: 135 136, on right: 130
defineSwitch (114)
    on left: 138, on right: 134
@9 (115)
    on left: 137, on right: 138
switchSpace (116)
    on left: 139 140, on right: 138 140
switchStats (117)
    on left: 141 142, on right: 139 141
switchStat (118)
    on left: 143 144 146 148, on right: 141 142
@10 (119)
    on left: 145, on right: 146
@11 (120)
    on left: 147, on right: 148
defineType (121)
    on left: 149 150 151 152 153, on right: 16 18 58 63 64 72 92 108
    109 154 155 156 157 163
typeListM (122)
    on left: 154 155, on right: 153 154
typeListP (123)
    on left: 156 157, on right: 156 159
typeList (124)
    on left: 158 159, on right: 64
typedefs (125)
    on left: 160 161 162, on right: 15 161
definTypedef (126)
    on left: 163, on right: 161 162
defineVariale (127)
    on left: 164 165, on right: 136
defineWhile (128)
    on left: 167, on right: 132
@12 (129)
    on left: 166, on right: 167


state 0

    0 $accept: . program $end

    DINIT    shift, and go to state 1
    TYPEDEF  shift, and go to state 2

    $end      reduce using rule 13 (program)
    $end      [reduce using rule 160 (typedefs)]
    TYPEDEF   [reduce using rule 160 (typedefs)]
    $default  reduce using rule 160 (typedefs)

    program       go to state 3
    init          go to state 4
    typedefs      go to state 5
    definTypedef  go to state 6


state 1

   85 init: DINIT . endls initContext DEND

    ENDL  shift, and go to state 7

    endls  go to state 8


state 2

  163 definTypedef: TYPEDEF . name defineType

    NAME  shift, and go to state 9

    name  go to state 10


state 3

    0 $accept: program . $end

    $end  shift, and go to state 11


state 4

   14 program: init .

    $default  reduce using rule 14 (program)


state 5

   15 program: typedefs . stats
  161 typedefs: typedefs . definTypedef endls

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 14
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22
    TYPEDEF    shift, and go to state 2

    NAME       [reduce using rule 124 (stats)]
    ENDL       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 124 (stats)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 124 (stats)]
    LPAREN     [reduce using rule 124 (stats)]
    LBRACE     [reduce using rule 124 (stats)]
    RETURN     [reduce using rule 124 (stats)]
    IF         [reduce using rule 124 (stats)]
    FOR        [reduce using rule 124 (stats)]
    WHILE      [reduce using rule 124 (stats)]
    SWITCH     [reduce using rule 124 (stats)]
    BREAK      [reduce using rule 124 (stats)]
    CONTINUE   [reduce using rule 124 (stats)]
    CONST      [reduce using rule 124 (stats)]
    $default   reduce using rule 124 (stats)

    endls          go to state 23
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    controlSpace   go to state 41
    stats          go to state 42
    stat           go to state 43
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    definTypedef   go to state 47
    defineVariale  go to state 48
    defineWhile    go to state 49


state 6

  162 typedefs: definTypedef . endls

    ENDL  shift, and go to state 7

    endls  go to state 50


state 7

    2 endls: ENDL .

    $default  reduce using rule 2 (endls)


state 8

    1 endls: endls . ENDL
   85 init: DINIT endls . initContext DEND

    ENDL      shift, and go to state 51
    OPERATOR  shift, and go to state 52

    $default  reduce using rule 86 (initContext)

    initContext   go to state 53
    initOperator  go to state 54


state 9

   12 name: NAME .

    $default  reduce using rule 12 (name)


state 10

  163 definTypedef: TYPEDEF name . defineType

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 56


state 11

    0 $accept: program $end .

    $default  accept


state 12

    5 endc: SEMICOLON .

    $default  reduce using rule 5 (endc)


state 13

  153 defineType: LPAREN . typeListM RPAREN

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 57
    typeListM   go to state 58


state 14

   18 dictType: LBRACE . defineType RBRACE

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 59


state 15

  120 controlSpace: RETURN . expr
  121             | RETURN .

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    NAME           [reduce using rule 121 (controlSpace)]
    INT            [reduce using rule 121 (controlSpace)]
    NUMBER         [reduce using rule 121 (controlSpace)]
    STRING         [reduce using rule 121 (controlSpace)]
    VALUE_BOOLEAN  [reduce using rule 121 (controlSpace)]
    VALUE_VOID     [reduce using rule 121 (controlSpace)]
    RPAREN         [reduce using rule 121 (controlSpace)]
    LPAREN         [reduce using rule 121 (controlSpace)]
    LBRACE         [reduce using rule 121 (controlSpace)]
    LBRACKET       [reduce using rule 121 (controlSpace)]
    $default       reduce using rule 121 (controlSpace)

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 72
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 16

   78 ifPart: IF . LPAREN expr RPAREN @6 subSpace

    LPAREN  shift, and go to state 77


state 17

   56 defineFor: FOR . LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    LPAREN  shift, and go to state 78


state 18

  167 defineWhile: WHILE . LPAREN expr RPAREN @12 subSpace

    LPAREN  shift, and go to state 79


state 19

  138 defineSwitch: SWITCH . LPAREN expr RPAREN @9 switchSpace

    LPAREN  shift, and go to state 80


state 20

  122 controlSpace: BREAK .

    $default  reduce using rule 122 (controlSpace)


state 21

  123 controlSpace: CONTINUE .

    $default  reduce using rule 123 (controlSpace)


state 22

  165 defineVariale: CONST . paramListP

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 39
    paramListP   go to state 81
    defineType   go to state 82


state 23

    1 endls: endls . ENDL
    6 endc: endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 6 (endc)]
    $default  reduce using rule 6 (endc)


state 24

  127 stat: endc .

    $default  reduce using rule 127 (stat)


state 25

   65 defineIden: name .
  149 defineType: name .

    NAME      reduce using rule 149 (defineType)
    COLON     reduce using rule 149 (defineType)
    BRACKET   reduce using rule 149 (defineType)
    $default  reduce using rule 65 (defineIden)


state 26

  151 defineType: arrayType .

    $default  reduce using rule 151 (defineType)


state 27

  152 defineType: dictType .

    $default  reduce using rule 152 (defineType)


state 28

  133 stat: defineFor .

    $default  reduce using rule 133 (stat)


state 29

  135 defineStat: defineFunc .

    $default  reduce using rule 135 (defineStat)


state 30

  150 defineType: funcType .

    $default  reduce using rule 150 (defineType)


state 31

   69 idenFunc: defineIden . LPAREN exprList RPAREN
   70         | defineIden . LPAREN RPAREN
   71 idenBracket: defineIden . LBRACKET expr RBRACKET
   72 idenTarget: defineIden . LT defineType GT
   94 assignment: defineIden . ASSIGN expr

    LT        shift, and go to state 83
    ASSIGN    shift, and go to state 84
    LPAREN    shift, and go to state 85
    LBRACKET  shift, and go to state 86


state 32

   66 defineIden: idenFunc .
   96 iteration: idenFunc .

    LT        reduce using rule 66 (defineIden)
    LT        [reduce using rule 96 (iteration)]
    ASSIGN    reduce using rule 66 (defineIden)
    LPAREN    reduce using rule 66 (defineIden)
    LPAREN    [reduce using rule 96 (iteration)]
    LBRACKET  reduce using rule 66 (defineIden)
    LBRACKET  [reduce using rule 96 (iteration)]
    $default  reduce using rule 96 (iteration)


state 33

   67 defineIden: idenBracket .

    $default  reduce using rule 67 (defineIden)


state 34

   68 defineIden: idenTarget .

    $default  reduce using rule 68 (defineIden)


state 35

  131 stat: defineIf .

    $default  reduce using rule 131 (stat)


state 36

   73 defineIf: ifPart .
   74         | ifPart . elseIfParts
   75         | ifPart . endlsn elsePart
   76         | ifPart . endlsn elseIfParts endlsn elsePart

    ENDL  shift, and go to state 7
    ELSE  shift, and go to state 87

    ENDL      [reduce using rule 73 (defineIf)]
    ELSE      [reduce using rule 3 (endlsn)]
    ELSE      [reduce using rule 73 (defineIf)]
    $default  reduce using rule 73 (defineIf)

    endls        go to state 88
    endlsn       go to state 89
    elseIfParts  go to state 90
    elseIfPart   go to state 91


state 37

   95 iteration: assignment .

    $default  reduce using rule 95 (iteration)


state 38

  128 stat: iteration .

    $default  reduce using rule 128 (stat)


state 39

  111 paramListP: defineParam .

    $default  reduce using rule 111 (paramListP)


state 40

  110 paramListP: paramListP . list defineParam
  164 defineVariale: paramListP .

    COMMA  shift, and go to state 92

    COMMA     [reduce using rule 164 (defineVariale)]
    $default  reduce using rule 164 (defineVariale)

    list  go to state 93


state 41

  129 stat: controlSpace .

    $default  reduce using rule 129 (stat)


state 42

   15 program: typedefs stats .
  125 stats: stats . stat endc

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 14
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    $default   reduce using rule 15 (program)

    endls          go to state 23
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    controlSpace   go to state 41
    stat           go to state 94
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 43

  126 stats: stat . endc

    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12

    endls  go to state 23
    endc   go to state 95


state 44

  130 stat: defineStat .

    $default  reduce using rule 130 (stat)


state 45

  134 stat: defineSwitch .

    $default  reduce using rule 134 (stat)


state 46

   16 arrayType: defineType . BRACKET
   58 defineFunc: defineType . name funcHeaderV @3 subSpace
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  108 defineParam: defineType . name
  109            | defineType . name ASSIGN expr

    NAME     shift, and go to state 9
    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    name  go to state 98


state 47

  161 typedefs: typedefs definTypedef . endls

    ENDL  shift, and go to state 7

    endls  go to state 99


state 48

  136 defineStat: defineVariale .

    $default  reduce using rule 136 (defineStat)


state 49

  132 stat: defineWhile .

    $default  reduce using rule 132 (stat)


state 50

    1 endls: endls . ENDL
  162 typedefs: definTypedef endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 162 (typedefs)]
    $default  reduce using rule 162 (typedefs)


state 51

    1 endls: endls ENDL .

    $default  reduce using rule 1 (endls)


state 52

   88 initOperator: OPERATOR . LBRACE initOperatorContexts RBRACE endls

    LBRACE  shift, and go to state 100


state 53

   85 init: DINIT endls initContext . DEND

    DEND  shift, and go to state 101


state 54

   87 initContext: initOperator .

    $default  reduce using rule 87 (initContext)


state 55

  149 defineType: name .

    $default  reduce using rule 149 (defineType)


state 56

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  163 definTypedef: TYPEDEF name defineType .

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 163 (definTypedef)


state 57

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  155 typeListM: defineType .

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 155 (typeListM)


state 58

  153 defineType: LPAREN typeListM . RPAREN
  154 typeListM: typeListM . SOR defineType

    RPAREN  shift, and go to state 102
    SOR     shift, and go to state 103


state 59

   16 arrayType: defineType . BRACKET
   18 dictType: LBRACE defineType . RBRACE
   64 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 96
    RBRACE   shift, and go to state 104
    BRACKET  shift, and go to state 97


state 60

   43 expr: INT .

    $default  reduce using rule 43 (expr)


state 61

   44 expr: NUMBER .

    $default  reduce using rule 44 (expr)


state 62

   40 expr: STRING .

    $default  reduce using rule 40 (expr)


state 63

   42 expr: VALUE_BOOLEAN .

    $default  reduce using rule 42 (expr)


state 64

   41 expr: VALUE_VOID .

    $default  reduce using rule 41 (expr)


state 65

   39 expr: RPAREN . expr LPAREN

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 105
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 66

   63 funcHeaderE: LPAREN . @5 paramList RPAREN COLON defineType

    $default  reduce using rule 62 (@5)

    @5  go to state 106


state 67

   19 dictExpr: LBRACE . dictContext RBRACE

    NAME  shift, and go to state 9
    ENDL  shift, and go to state 7

    NAME      [reduce using rule 20 (dictContext)]
    ENDL      [reduce using rule 20 (dictContext)]
    $default  reduce using rule 20 (dictContext)

    endls        go to state 107
    name         go to state 108
    dictContext  go to state 109
    dictList     go to state 110


state 68

   17 arrayExpr: LBRACKET . exprList RBRACKET

    NAME           shift, and go to state 9
    ENDL           shift, and go to state 7
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    NAME           [reduce using rule 49 (exprList)]
    ENDL           [reduce using rule 49 (exprList)]
    INT            [reduce using rule 49 (exprList)]
    NUMBER         [reduce using rule 49 (exprList)]
    STRING         [reduce using rule 49 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 49 (exprList)]
    VALUE_VOID     [reduce using rule 49 (exprList)]
    RPAREN         [reduce using rule 49 (exprList)]
    LPAREN         [reduce using rule 49 (exprList)]
    LBRACE         [reduce using rule 49 (exprList)]
    LBRACKET       [reduce using rule 49 (exprList)]
    $default       reduce using rule 49 (exprList)

    endls        go to state 111
    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 112
    exprList     go to state 113
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 69

   65 defineIden: name .

    $default  reduce using rule 65 (defineIden)


state 70

   47 expr: arrayExpr .

    $default  reduce using rule 47 (expr)


state 71

   48 expr: dictExpr .

    $default  reduce using rule 48 (expr)


state 72

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
  120 controlSpace: RETURN expr .

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    OR        [reduce using rule 120 (controlSpace)]
    AND       [reduce using rule 120 (controlSpace)]
    NE        [reduce using rule 120 (controlSpace)]
    EQ        [reduce using rule 120 (controlSpace)]
    GE        [reduce using rule 120 (controlSpace)]
    GT        [reduce using rule 120 (controlSpace)]
    LE        [reduce using rule 120 (controlSpace)]
    LT        [reduce using rule 120 (controlSpace)]
    MINUS     [reduce using rule 120 (controlSpace)]
    PLUS      [reduce using rule 120 (controlSpace)]
    MODULUS   [reduce using rule 120 (controlSpace)]
    DIVIDE    [reduce using rule 120 (controlSpace)]
    MULT      [reduce using rule 120 (controlSpace)]
    $default  reduce using rule 120 (controlSpace)


state 73

   46 expr: funcExpr .

    $default  reduce using rule 46 (expr)


state 74

   60 funcExpr: funcHeaderE . @4 subSpace

    $default  reduce using rule 59 (@4)

    @4  go to state 127


state 75

   45 expr: defineIden .
   69 idenFunc: defineIden . LPAREN exprList RPAREN
   70         | defineIden . LPAREN RPAREN
   71 idenBracket: defineIden . LBRACKET expr RBRACKET
   72 idenTarget: defineIden . LT defineType GT

    LT        shift, and go to state 83
    LPAREN    shift, and go to state 85
    LBRACKET  shift, and go to state 86

    LT        [reduce using rule 45 (expr)]
    LPAREN    [reduce using rule 45 (expr)]
    LBRACKET  [reduce using rule 45 (expr)]
    $default  reduce using rule 45 (expr)


state 76

   66 defineIden: idenFunc .

    $default  reduce using rule 66 (defineIden)


state 77

   78 ifPart: IF LPAREN . expr RPAREN @6 subSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 128
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 78

   56 defineFor: FOR LPAREN . paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    ENDL      [reduce using rule 112 (paramList)]
    $default  reduce using rule 112 (paramList)

    endls        go to state 129
    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 39
    paramListP   go to state 130
    paramList    go to state 131
    defineType   go to state 82


state 79

  167 defineWhile: WHILE LPAREN . expr RPAREN @12 subSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 132
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 80

  138 defineSwitch: SWITCH LPAREN . expr RPAREN @9 switchSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 133
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 81

  110 paramListP: paramListP . list defineParam
  165 defineVariale: CONST paramListP .

    COMMA  shift, and go to state 92

    COMMA     [reduce using rule 165 (defineVariale)]
    $default  reduce using rule 165 (defineVariale)

    list  go to state 93


state 82

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  108 defineParam: defineType . name
  109            | defineType . name ASSIGN expr

    NAME     shift, and go to state 9
    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    name  go to state 134


state 83

   72 idenTarget: defineIden LT . defineType GT

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 135


state 84

   94 assignment: defineIden ASSIGN . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 136
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 85

   69 idenFunc: defineIden LPAREN . exprList RPAREN
   70         | defineIden LPAREN . RPAREN

    NAME           shift, and go to state 9
    ENDL           shift, and go to state 7
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 137
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    NAME           [reduce using rule 49 (exprList)]
    ENDL           [reduce using rule 49 (exprList)]
    INT            [reduce using rule 49 (exprList)]
    NUMBER         [reduce using rule 49 (exprList)]
    STRING         [reduce using rule 49 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 49 (exprList)]
    VALUE_VOID     [reduce using rule 49 (exprList)]
    RPAREN         [reduce using rule 49 (exprList)]
    LPAREN         [reduce using rule 49 (exprList)]
    LBRACE         [reduce using rule 49 (exprList)]
    LBRACKET       [reduce using rule 49 (exprList)]
    $default       reduce using rule 49 (exprList)

    endls        go to state 111
    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 112
    exprList     go to state 138
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 86

   71 idenBracket: defineIden LBRACKET . expr RBRACKET

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 139
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 87

   82 elseIfPart: ELSE . IF LPAREN expr RPAREN @7 subSpace

    IF  shift, and go to state 140


state 88

    1 endls: endls . ENDL
    4 endlsn: endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 4 (endlsn)]
    $default  reduce using rule 4 (endlsn)


state 89

   75 defineIf: ifPart endlsn . elsePart
   76         | ifPart endlsn . elseIfParts endlsn elsePart

    ELSE  shift, and go to state 141

    elseIfParts  go to state 142
    elseIfPart   go to state 91
    elsePart     go to state 143


state 90

   74 defineIf: ifPart elseIfParts .
   79 elseIfParts: elseIfParts . endlsn elseIfPart

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 74 (defineIf)]
    ELSE      reduce using rule 3 (endlsn)
    ELSE      [reduce using rule 74 (defineIf)]
    $default  reduce using rule 74 (defineIf)

    endls   go to state 88
    endlsn  go to state 144


state 91

   80 elseIfParts: elseIfPart .

    $default  reduce using rule 80 (elseIfParts)


state 92

    7 list: COMMA .

    $default  reduce using rule 7 (list)


state 93

    8 list: list . endls
  110 paramListP: paramListP list . defineParam

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    endls        go to state 145
    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 146
    defineType   go to state 82


state 94

  125 stats: stats stat . endc

    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12

    endls  go to state 23
    endc   go to state 147


state 95

  126 stats: stat endc .

    $default  reduce using rule 126 (stats)


state 96

   64 funcType: defineType COLON . LPAREN typeList RPAREN

    LPAREN  shift, and go to state 148


state 97

   16 arrayType: defineType BRACKET .

    $default  reduce using rule 16 (arrayType)


state 98

   58 defineFunc: defineType name . funcHeaderV @3 subSpace
  108 defineParam: defineType name .
  109            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 149
    LPAREN  shift, and go to state 150

    LPAREN    [reduce using rule 108 (defineParam)]
    $default  reduce using rule 108 (defineParam)

    funcHeaderV  go to state 151


state 99

    1 endls: endls . ENDL
  161 typedefs: typedefs definTypedef endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 161 (typedefs)]
    $default  reduce using rule 161 (typedefs)


state 100

   88 initOperator: OPERATOR LBRACE . initOperatorContexts RBRACE endls

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    endls                 go to state 152
    name                  go to state 55
    arrayType             go to state 26
    dictType              go to state 27
    funcType              go to state 30
    initOperatorContexts  go to state 153
    initOperatorContext   go to state 154
    defineType            go to state 155


state 101

   85 init: DINIT endls initContext DEND .

    $default  reduce using rule 85 (init)


state 102

  153 defineType: LPAREN typeListM RPAREN .

    $default  reduce using rule 153 (defineType)


state 103

  154 typeListM: typeListM SOR . defineType

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 156


state 104

   18 dictType: LBRACE defineType RBRACE .

    $default  reduce using rule 18 (dictType)


state 105

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   39     | RPAREN expr . LPAREN

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    LPAREN   shift, and go to state 157


state 106

   63 funcHeaderE: LPAREN @5 . paramList RPAREN COLON defineType

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    ENDL      [reduce using rule 112 (paramList)]
    $default  reduce using rule 112 (paramList)

    endls        go to state 129
    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 39
    paramListP   go to state 130
    paramList    go to state 158
    defineType   go to state 82


state 107

    1 endls: endls . ENDL
   23 dictContext: endls . dictContext

    NAME  shift, and go to state 9
    ENDL  shift, and go to state 159

    NAME      [reduce using rule 20 (dictContext)]
    ENDL      [reduce using rule 20 (dictContext)]
    $default  reduce using rule 20 (dictContext)

    endls        go to state 107
    name         go to state 108
    dictContext  go to state 160
    dictList     go to state 110


state 108

   25 dictList: name . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 161
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 109

   19 dictExpr: LBRACE dictContext . RBRACE
   21 dictContext: dictContext . lists dictList
   24            | dictContext . endls

    ENDL    shift, and go to state 7
    RBRACE  shift, and go to state 162
    COMMA   shift, and go to state 92

    $default  reduce using rule 9 (lists)

    endls  go to state 163
    list   go to state 164
    lists  go to state 165


state 110

   22 dictContext: dictList .

    $default  reduce using rule 22 (dictContext)


state 111

    1 endls: endls . ENDL
   52 exprList: endls . exprList

    NAME           shift, and go to state 9
    ENDL           shift, and go to state 159
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    NAME           [reduce using rule 49 (exprList)]
    ENDL           [reduce using rule 49 (exprList)]
    INT            [reduce using rule 49 (exprList)]
    NUMBER         [reduce using rule 49 (exprList)]
    STRING         [reduce using rule 49 (exprList)]
    VALUE_BOOLEAN  [reduce using rule 49 (exprList)]
    VALUE_VOID     [reduce using rule 49 (exprList)]
    RPAREN         [reduce using rule 49 (exprList)]
    LPAREN         [reduce using rule 49 (exprList)]
    LBRACE         [reduce using rule 49 (exprList)]
    LBRACKET       [reduce using rule 49 (exprList)]
    $default       reduce using rule 49 (exprList)

    endls        go to state 111
    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 112
    exprList     go to state 166
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 112

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   51 exprList: expr .

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 51 (exprList)


state 113

   17 arrayExpr: LBRACKET exprList . RBRACKET
   50 exprList: exprList . lists expr
   53         | exprList . endls

    ENDL      shift, and go to state 7
    COMMA     shift, and go to state 92
    RBRACKET  shift, and go to state 167

    $default  reduce using rule 9 (lists)

    endls  go to state 168
    list   go to state 164
    lists  go to state 169


state 114

   27 expr: expr OR . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 170
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 115

   26 expr: expr AND . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 171
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 116

   29 expr: expr NE . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 172
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 117

   28 expr: expr EQ . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 173
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 118

   31 expr: expr GE . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 174
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 119

   30 expr: expr GT . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 175
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 120

   33 expr: expr LE . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 176
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 121

   32 expr: expr LT . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 177
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 122

   35 expr: expr MINUS . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 178
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 123

   34 expr: expr PLUS . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 179
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 124

   38 expr: expr MODULUS . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 180
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 125

   37 expr: expr DIVIDE . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 181
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 126

   36 expr: expr MULT . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 182
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 127

   60 funcExpr: funcHeaderE @4 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 185
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 128

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   78 ifPart: IF LPAREN expr . RPAREN @6 subSpace

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    RPAREN   shift, and go to state 187


state 129

    1 endls: endls . ENDL
  114 paramList: endls . paramList

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 159
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    ENDL      [reduce using rule 112 (paramList)]
    $default  reduce using rule 112 (paramList)

    endls        go to state 129
    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 39
    paramListP   go to state 130
    paramList    go to state 188
    defineType   go to state 82


state 130

  110 paramListP: paramListP . list defineParam
  113 paramList: paramListP .

    COMMA  shift, and go to state 92

    $default  reduce using rule 113 (paramList)

    list  go to state 93


state 131

   56 defineFor: FOR LPAREN paramList . @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace
  115 paramList: paramList . endls

    ENDL  shift, and go to state 7

    $default  reduce using rule 54 (@1)

    endls  go to state 189
    @1     go to state 190


state 132

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
  167 defineWhile: WHILE LPAREN expr . RPAREN @12 subSpace

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    RPAREN   shift, and go to state 191


state 133

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
  138 defineSwitch: SWITCH LPAREN expr . RPAREN @9 switchSpace

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    RPAREN   shift, and go to state 192


state 134

  108 defineParam: defineType name .
  109            | defineType name . ASSIGN expr

    ASSIGN  shift, and go to state 149

    $default  reduce using rule 108 (defineParam)


state 135

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
   72 idenTarget: defineIden LT defineType . GT

    GT       shift, and go to state 193
    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97


state 136

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   94 assignment: defineIden ASSIGN expr .

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    OR        [reduce using rule 94 (assignment)]
    AND       [reduce using rule 94 (assignment)]
    NE        [reduce using rule 94 (assignment)]
    EQ        [reduce using rule 94 (assignment)]
    GE        [reduce using rule 94 (assignment)]
    GT        [reduce using rule 94 (assignment)]
    LE        [reduce using rule 94 (assignment)]
    LT        [reduce using rule 94 (assignment)]
    MINUS     [reduce using rule 94 (assignment)]
    PLUS      [reduce using rule 94 (assignment)]
    MODULUS   [reduce using rule 94 (assignment)]
    DIVIDE    [reduce using rule 94 (assignment)]
    MULT      [reduce using rule 94 (assignment)]
    $default  reduce using rule 94 (assignment)


state 137

   39 expr: RPAREN . expr LPAREN
   70 idenFunc: defineIden LPAREN RPAREN .

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    NAME           [reduce using rule 70 (idenFunc)]
    INT            [reduce using rule 70 (idenFunc)]
    NUMBER         [reduce using rule 70 (idenFunc)]
    STRING         [reduce using rule 70 (idenFunc)]
    VALUE_BOOLEAN  [reduce using rule 70 (idenFunc)]
    VALUE_VOID     [reduce using rule 70 (idenFunc)]
    RPAREN         [reduce using rule 70 (idenFunc)]
    LPAREN         [reduce using rule 70 (idenFunc)]
    LBRACE         [reduce using rule 70 (idenFunc)]
    LBRACKET       [reduce using rule 70 (idenFunc)]
    $default       reduce using rule 70 (idenFunc)

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 105
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 138

   50 exprList: exprList . lists expr
   53         | exprList . endls
   69 idenFunc: defineIden LPAREN exprList . RPAREN

    ENDL    shift, and go to state 7
    RPAREN  shift, and go to state 194
    COMMA   shift, and go to state 92

    RPAREN    [reduce using rule 9 (lists)]
    $default  reduce using rule 9 (lists)

    endls  go to state 168
    list   go to state 164
    lists  go to state 169


state 139

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   71 idenBracket: defineIden LBRACKET expr . RBRACKET

    OR        shift, and go to state 114
    AND       shift, and go to state 115
    NE        shift, and go to state 116
    EQ        shift, and go to state 117
    GE        shift, and go to state 118
    GT        shift, and go to state 119
    LE        shift, and go to state 120
    LT        shift, and go to state 121
    MINUS     shift, and go to state 122
    PLUS      shift, and go to state 123
    MODULUS   shift, and go to state 124
    DIVIDE    shift, and go to state 125
    MULT      shift, and go to state 126
    RBRACKET  shift, and go to state 195


state 140

   82 elseIfPart: ELSE IF . LPAREN expr RPAREN @7 subSpace

    LPAREN  shift, and go to state 196


state 141

   82 elseIfPart: ELSE . IF LPAREN expr RPAREN @7 subSpace
   84 elsePart: ELSE . @8 subSpace

    IF  shift, and go to state 140

    IF        [reduce using rule 83 (@8)]
    $default  reduce using rule 83 (@8)

    @8  go to state 197


state 142

   76 defineIf: ifPart endlsn elseIfParts . endlsn elsePart
   79 elseIfParts: elseIfParts . endlsn elseIfPart

    ENDL  shift, and go to state 7

    $default  reduce using rule 3 (endlsn)

    endls   go to state 88
    endlsn  go to state 198


state 143

   75 defineIf: ifPart endlsn elsePart .

    $default  reduce using rule 75 (defineIf)


state 144

   79 elseIfParts: elseIfParts endlsn . elseIfPart

    ELSE  shift, and go to state 87

    elseIfPart  go to state 199


state 145

    1 endls: endls . ENDL
    8 list: list endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 8 (list)]
    $default  reduce using rule 8 (list)


state 146

  110 paramListP: paramListP list defineParam .

    $default  reduce using rule 110 (paramListP)


state 147

  125 stats: stats stat endc .

    $default  reduce using rule 125 (stats)


state 148

   64 funcType: defineType COLON LPAREN . typeList RPAREN

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    $default  reduce using rule 158 (typeList)

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 200
    typeListP   go to state 201
    typeList    go to state 202


state 149

  109 defineParam: defineType name ASSIGN . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 203
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 150

   61 funcHeaderV: LPAREN . paramList RPAREN

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    ENDL      [reduce using rule 112 (paramList)]
    $default  reduce using rule 112 (paramList)

    endls        go to state 129
    name         go to state 55
    arrayType    go to state 26
    dictType     go to state 27
    funcType     go to state 30
    defineParam  go to state 39
    paramListP   go to state 130
    paramList    go to state 204
    defineType   go to state 82


state 151

   58 defineFunc: defineType name funcHeaderV . @3 subSpace

    $default  reduce using rule 57 (@3)

    @3  go to state 205


state 152

    1 endls: endls . ENDL
   91 initOperatorContext: endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 91 (initOperatorContext)]
    $default  reduce using rule 91 (initOperatorContext)


state 153

   88 initOperator: OPERATOR LBRACE initOperatorContexts . RBRACE endls
   89 initOperatorContexts: initOperatorContexts . initOperatorContext

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    RBRACE  shift, and go to state 206
    LBRACE  shift, and go to state 14

    endls                go to state 152
    name                 go to state 55
    arrayType            go to state 26
    dictType             go to state 27
    funcType             go to state 30
    initOperatorContext  go to state 207
    defineType           go to state 155


state 154

   90 initOperatorContexts: initOperatorContext .

    $default  reduce using rule 90 (initOperatorContexts)


state 155

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
   92 initOperatorContext: defineType . operator defineType ASSIGN name endls

    NE       shift, and go to state 208
    EQ       shift, and go to state 209
    GE       shift, and go to state 210
    GT       shift, and go to state 211
    LE       shift, and go to state 212
    LT       shift, and go to state 213
    MINUS    shift, and go to state 214
    PLUS     shift, and go to state 215
    MODULUS  shift, and go to state 216
    DIVIDE   shift, and go to state 217
    MULT     shift, and go to state 218
    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    operator  go to state 219


state 156

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  154 typeListM: typeListM SOR defineType .

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 154 (typeListM)


state 157

   39 expr: RPAREN expr LPAREN .

    $default  reduce using rule 39 (expr)


state 158

   63 funcHeaderE: LPAREN @5 paramList . RPAREN COLON defineType
  115 paramList: paramList . endls

    ENDL    shift, and go to state 7
    RPAREN  shift, and go to state 220

    endls  go to state 189


state 159

    1 endls: endls ENDL .
    2      | ENDL .

    OR             reduce using rule 1 (endls)
    OR             [reduce using rule 2 (endls)]
    AND            reduce using rule 1 (endls)
    AND            [reduce using rule 2 (endls)]
    NE             reduce using rule 1 (endls)
    NE             [reduce using rule 2 (endls)]
    EQ             reduce using rule 1 (endls)
    EQ             [reduce using rule 2 (endls)]
    GE             reduce using rule 1 (endls)
    GE             [reduce using rule 2 (endls)]
    GT             reduce using rule 1 (endls)
    GT             [reduce using rule 2 (endls)]
    LE             reduce using rule 1 (endls)
    LE             [reduce using rule 2 (endls)]
    LT             reduce using rule 1 (endls)
    LT             [reduce using rule 2 (endls)]
    MINUS          reduce using rule 1 (endls)
    MINUS          [reduce using rule 2 (endls)]
    PLUS           reduce using rule 1 (endls)
    PLUS           [reduce using rule 2 (endls)]
    MODULUS        reduce using rule 1 (endls)
    MODULUS        [reduce using rule 2 (endls)]
    DIVIDE         reduce using rule 1 (endls)
    DIVIDE         [reduce using rule 2 (endls)]
    MULT           reduce using rule 1 (endls)
    MULT           [reduce using rule 2 (endls)]
    NAME           reduce using rule 1 (endls)
    NAME           [reduce using rule 2 (endls)]
    ENDL           reduce using rule 1 (endls)
    ENDL           [reduce using rule 2 (endls)]
    INT            reduce using rule 1 (endls)
    INT            [reduce using rule 2 (endls)]
    NUMBER         reduce using rule 1 (endls)
    NUMBER         [reduce using rule 2 (endls)]
    STRING         reduce using rule 1 (endls)
    STRING         [reduce using rule 2 (endls)]
    VALUE_BOOLEAN  reduce using rule 1 (endls)
    VALUE_BOOLEAN  [reduce using rule 2 (endls)]
    VALUE_VOID     reduce using rule 1 (endls)
    VALUE_VOID     [reduce using rule 2 (endls)]
    SEMICOLON      reduce using rule 1 (endls)
    SEMICOLON      [reduce using rule 2 (endls)]
    RPAREN         reduce using rule 1 (endls)
    RPAREN         [reduce using rule 2 (endls)]
    LPAREN         reduce using rule 1 (endls)
    LPAREN         [reduce using rule 2 (endls)]
    RBRACE         reduce using rule 1 (endls)
    RBRACE         [reduce using rule 2 (endls)]
    LBRACE         reduce using rule 1 (endls)
    LBRACE         [reduce using rule 2 (endls)]
    COMMA          reduce using rule 1 (endls)
    COMMA          [reduce using rule 2 (endls)]
    RBRACKET       reduce using rule 1 (endls)
    RBRACKET       [reduce using rule 2 (endls)]
    LBRACKET       reduce using rule 1 (endls)
    LBRACKET       [reduce using rule 2 (endls)]
    RETURN         reduce using rule 1 (endls)
    RETURN         [reduce using rule 2 (endls)]
    IF             reduce using rule 1 (endls)
    IF             [reduce using rule 2 (endls)]
    ELSE           reduce using rule 1 (endls)
    ELSE           [reduce using rule 2 (endls)]
    FOR            reduce using rule 1 (endls)
    FOR            [reduce using rule 2 (endls)]
    WHILE          reduce using rule 1 (endls)
    WHILE          [reduce using rule 2 (endls)]
    SWITCH         reduce using rule 1 (endls)
    SWITCH         [reduce using rule 2 (endls)]
    CASE           reduce using rule 1 (endls)
    CASE           [reduce using rule 2 (endls)]
    DEFAULT        reduce using rule 1 (endls)
    DEFAULT        [reduce using rule 2 (endls)]
    BREAK          reduce using rule 1 (endls)
    BREAK          [reduce using rule 2 (endls)]
    CONTINUE       reduce using rule 1 (endls)
    CONTINUE       [reduce using rule 2 (endls)]
    CONST          reduce using rule 1 (endls)
    CONST          [reduce using rule 2 (endls)]
    $default       reduce using rule 1 (endls)


state 160

   21 dictContext: dictContext . lists dictList
   23            | endls dictContext .
   24            | dictContext . endls

    ENDL   shift, and go to state 7
    COMMA  shift, and go to state 92

    NAME      reduce using rule 9 (lists)
    NAME      [reduce using rule 23 (dictContext)]
    ENDL      [reduce using rule 23 (dictContext)]
    RBRACE    reduce using rule 23 (dictContext)
    COMMA     [reduce using rule 23 (dictContext)]
    $default  reduce using rule 9 (lists)

    endls  go to state 163
    list   go to state 164
    lists  go to state 165


state 161

   25 dictList: name expr .
   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 25 (dictList)


state 162

   19 dictExpr: LBRACE dictContext RBRACE .

    $default  reduce using rule 19 (dictExpr)


state 163

    1 endls: endls . ENDL
   11 lists: endls .
   24 dictContext: dictContext endls .

    ENDL  shift, and go to state 51

    NAME      reduce using rule 11 (lists)
    NAME      [reduce using rule 24 (dictContext)]
    ENDL      [reduce using rule 24 (dictContext)]
    $default  reduce using rule 24 (dictContext)


state 164

    8 list: list . endls
   10 lists: list .

    ENDL  shift, and go to state 7

    $default  reduce using rule 10 (lists)

    endls  go to state 145


state 165

   21 dictContext: dictContext lists . dictList

    NAME  shift, and go to state 9

    name      go to state 108
    dictList  go to state 221


state 166

   50 exprList: exprList . lists expr
   52         | endls exprList .
   53         | exprList . endls

    ENDL   shift, and go to state 7
    COMMA  shift, and go to state 92

    NAME           reduce using rule 9 (lists)
    NAME           [reduce using rule 52 (exprList)]
    ENDL           [reduce using rule 52 (exprList)]
    INT            reduce using rule 9 (lists)
    INT            [reduce using rule 52 (exprList)]
    NUMBER         reduce using rule 9 (lists)
    NUMBER         [reduce using rule 52 (exprList)]
    STRING         reduce using rule 9 (lists)
    STRING         [reduce using rule 52 (exprList)]
    VALUE_BOOLEAN  reduce using rule 9 (lists)
    VALUE_BOOLEAN  [reduce using rule 52 (exprList)]
    VALUE_VOID     reduce using rule 9 (lists)
    VALUE_VOID     [reduce using rule 52 (exprList)]
    RPAREN         reduce using rule 9 (lists)
    RPAREN         [reduce using rule 52 (exprList)]
    LPAREN         reduce using rule 9 (lists)
    LPAREN         [reduce using rule 52 (exprList)]
    LBRACE         reduce using rule 9 (lists)
    LBRACE         [reduce using rule 52 (exprList)]
    COMMA          [reduce using rule 52 (exprList)]
    RBRACKET       reduce using rule 52 (exprList)
    LBRACKET       reduce using rule 9 (lists)
    LBRACKET       [reduce using rule 52 (exprList)]
    $default       reduce using rule 9 (lists)

    endls  go to state 168
    list   go to state 164
    lists  go to state 169


state 167

   17 arrayExpr: LBRACKET exprList RBRACKET .

    $default  reduce using rule 17 (arrayExpr)


state 168

    1 endls: endls . ENDL
   11 lists: endls .
   53 exprList: exprList endls .

    ENDL  shift, and go to state 51

    NAME           reduce using rule 11 (lists)
    NAME           [reduce using rule 53 (exprList)]
    ENDL           [reduce using rule 53 (exprList)]
    INT            reduce using rule 11 (lists)
    INT            [reduce using rule 53 (exprList)]
    NUMBER         reduce using rule 11 (lists)
    NUMBER         [reduce using rule 53 (exprList)]
    STRING         reduce using rule 11 (lists)
    STRING         [reduce using rule 53 (exprList)]
    VALUE_BOOLEAN  reduce using rule 11 (lists)
    VALUE_BOOLEAN  [reduce using rule 53 (exprList)]
    VALUE_VOID     reduce using rule 11 (lists)
    VALUE_VOID     [reduce using rule 53 (exprList)]
    RPAREN         reduce using rule 11 (lists)
    RPAREN         [reduce using rule 53 (exprList)]
    LPAREN         reduce using rule 11 (lists)
    LPAREN         [reduce using rule 53 (exprList)]
    LBRACE         reduce using rule 11 (lists)
    LBRACE         [reduce using rule 53 (exprList)]
    COMMA          reduce using rule 53 (exprList)
    RBRACKET       reduce using rule 53 (exprList)
    LBRACKET       reduce using rule 11 (lists)
    LBRACKET       [reduce using rule 53 (exprList)]
    $default       reduce using rule 11 (lists)


state 169

   50 exprList: exprList lists . expr

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 222
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 170

   26 expr: expr . AND expr
   27     | expr . OR expr
   27     | expr OR expr .
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 27 (expr)


state 171

   26 expr: expr . AND expr
   26     | expr AND expr .
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 26 (expr)


state 172

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   29     | expr NE expr .
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 29 (expr)


state 173

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   28     | expr EQ expr .
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 28 (expr)


state 174

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   31     | expr GE expr .
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 31 (expr)


state 175

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   30     | expr GT expr .
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 30 (expr)


state 176

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   33     | expr LE expr .
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 33 (expr)


state 177

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   32     | expr LT expr .
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 32 (expr)


state 178

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   35     | expr MINUS expr .
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 35 (expr)


state 179

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   34     | expr PLUS expr .
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 34 (expr)


state 180

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   38     | expr MODULUS expr .

    $default  reduce using rule 38 (expr)


state 181

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   37     | expr DIVIDE expr .
   38     | expr . MODULUS expr

    $default  reduce using rule 37 (expr)


state 182

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   36     | expr MULT expr .
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr

    $default  reduce using rule 36 (expr)


state 183

   18 dictType: LBRACE . defineType RBRACE
  116 subSpace: LBRACE . endlsn stats RBRACE
  118         | LBRACE . endlsn stat endlsn RBRACE

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    NAME      [reduce using rule 3 (endlsn)]
    ENDL      [reduce using rule 3 (endlsn)]
    LPAREN    [reduce using rule 3 (endlsn)]
    LBRACE    [reduce using rule 3 (endlsn)]
    $default  reduce using rule 3 (endlsn)

    endls       go to state 88
    endlsn      go to state 223
    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 59


state 184

    1 endls: endls . ENDL
    6 endc: endls .
  119 subSpace: endls . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 159
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    OR             reduce using rule 6 (endc)
    OR             [reduce using rule 93 (assignment)]
    AND            reduce using rule 6 (endc)
    AND            [reduce using rule 93 (assignment)]
    NE             reduce using rule 6 (endc)
    NE             [reduce using rule 93 (assignment)]
    EQ             reduce using rule 6 (endc)
    EQ             [reduce using rule 93 (assignment)]
    GE             reduce using rule 6 (endc)
    GE             [reduce using rule 93 (assignment)]
    GT             reduce using rule 6 (endc)
    GT             [reduce using rule 93 (assignment)]
    LE             reduce using rule 6 (endc)
    LE             [reduce using rule 93 (assignment)]
    LT             reduce using rule 6 (endc)
    LT             [reduce using rule 93 (assignment)]
    MINUS          reduce using rule 6 (endc)
    MINUS          [reduce using rule 93 (assignment)]
    PLUS           reduce using rule 6 (endc)
    PLUS           [reduce using rule 93 (assignment)]
    MODULUS        reduce using rule 6 (endc)
    MODULUS        [reduce using rule 93 (assignment)]
    DIVIDE         reduce using rule 6 (endc)
    DIVIDE         [reduce using rule 93 (assignment)]
    MULT           reduce using rule 6 (endc)
    MULT           [reduce using rule 93 (assignment)]
    NAME           [reduce using rule 6 (endc)]
    NAME           [reduce using rule 93 (assignment)]
    ENDL           [reduce using rule 6 (endc)]
    ENDL           [reduce using rule 93 (assignment)]
    INT            reduce using rule 6 (endc)
    INT            [reduce using rule 93 (assignment)]
    NUMBER         reduce using rule 6 (endc)
    NUMBER         [reduce using rule 93 (assignment)]
    STRING         reduce using rule 6 (endc)
    STRING         [reduce using rule 93 (assignment)]
    VALUE_BOOLEAN  reduce using rule 6 (endc)
    VALUE_BOOLEAN  [reduce using rule 93 (assignment)]
    VALUE_VOID     reduce using rule 6 (endc)
    VALUE_VOID     [reduce using rule 93 (assignment)]
    SEMICOLON      [reduce using rule 6 (endc)]
    SEMICOLON      [reduce using rule 93 (assignment)]
    RPAREN         reduce using rule 6 (endc)
    RPAREN         [reduce using rule 93 (assignment)]
    LPAREN         [reduce using rule 6 (endc)]
    LPAREN         [reduce using rule 93 (assignment)]
    RBRACE         reduce using rule 6 (endc)
    RBRACE         [reduce using rule 93 (assignment)]
    LBRACE         [reduce using rule 6 (endc)]
    LBRACE         [reduce using rule 93 (assignment)]
    COMMA          reduce using rule 6 (endc)
    COMMA          [reduce using rule 93 (assignment)]
    RBRACKET       reduce using rule 6 (endc)
    RBRACKET       [reduce using rule 93 (assignment)]
    LBRACKET       reduce using rule 6 (endc)
    LBRACKET       [reduce using rule 93 (assignment)]
    ELSE           reduce using rule 6 (endc)
    ELSE           [reduce using rule 93 (assignment)]
    CASE           reduce using rule 6 (endc)
    CASE           [reduce using rule 93 (assignment)]
    DEFAULT        reduce using rule 6 (endc)
    DEFAULT        [reduce using rule 93 (assignment)]
    $default       reduce using rule 6 (endc)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 224
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 185

   60 funcExpr: funcHeaderE @4 subSpace .

    $default  reduce using rule 60 (funcExpr)


state 186

  117 subSpace: stat .

    $default  reduce using rule 117 (subSpace)


state 187

   78 ifPart: IF LPAREN expr RPAREN . @6 subSpace

    $default  reduce using rule 77 (@6)

    @6  go to state 225


state 188

  114 paramList: endls paramList .
  115          | paramList . endls

    ENDL  shift, and go to state 7

    ENDL      [reduce using rule 114 (paramList)]
    $default  reduce using rule 114 (paramList)

    endls  go to state 189


state 189

    1 endls: endls . ENDL
  115 paramList: paramList endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 115 (paramList)]
    $default  reduce using rule 115 (paramList)


state 190

   56 defineFor: FOR LPAREN paramList @1 . SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace

    SEMICOLON  shift, and go to state 226


state 191

  167 defineWhile: WHILE LPAREN expr RPAREN . @12 subSpace

    $default  reduce using rule 166 (@12)

    @12  go to state 227


state 192

  138 defineSwitch: SWITCH LPAREN expr RPAREN . @9 switchSpace

    $default  reduce using rule 137 (@9)

    @9  go to state 228


state 193

   72 idenTarget: defineIden LT defineType GT .

    $default  reduce using rule 72 (idenTarget)


state 194

   69 idenFunc: defineIden LPAREN exprList RPAREN .

    $default  reduce using rule 69 (idenFunc)


state 195

   71 idenBracket: defineIden LBRACKET expr RBRACKET .

    $default  reduce using rule 71 (idenBracket)


state 196

   82 elseIfPart: ELSE IF LPAREN . expr RPAREN @7 subSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 229
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 197

   84 elsePart: ELSE @8 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 230
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 198

   76 defineIf: ifPart endlsn elseIfParts endlsn . elsePart
   79 elseIfParts: elseIfParts endlsn . elseIfPart

    ELSE  shift, and go to state 141

    elseIfPart  go to state 199
    elsePart    go to state 231


state 199

   79 elseIfParts: elseIfParts endlsn elseIfPart .

    $default  reduce using rule 79 (elseIfParts)


state 200

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  157 typeListP: defineType .

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 157 (typeListP)


state 201

  156 typeListP: typeListP . list defineType
  159 typeList: typeListP .

    COMMA  shift, and go to state 92

    $default  reduce using rule 159 (typeList)

    list  go to state 232


state 202

   64 funcType: defineType COLON LPAREN typeList . RPAREN

    RPAREN  shift, and go to state 233


state 203

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
  109 defineParam: defineType name ASSIGN expr .

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    OR        [reduce using rule 109 (defineParam)]
    AND       [reduce using rule 109 (defineParam)]
    NE        [reduce using rule 109 (defineParam)]
    EQ        [reduce using rule 109 (defineParam)]
    GE        [reduce using rule 109 (defineParam)]
    GT        [reduce using rule 109 (defineParam)]
    LE        [reduce using rule 109 (defineParam)]
    LT        [reduce using rule 109 (defineParam)]
    MINUS     [reduce using rule 109 (defineParam)]
    PLUS      [reduce using rule 109 (defineParam)]
    MODULUS   [reduce using rule 109 (defineParam)]
    DIVIDE    [reduce using rule 109 (defineParam)]
    MULT      [reduce using rule 109 (defineParam)]
    $default  reduce using rule 109 (defineParam)


state 204

   61 funcHeaderV: LPAREN paramList . RPAREN
  115 paramList: paramList . endls

    ENDL    shift, and go to state 7
    RPAREN  shift, and go to state 234

    endls  go to state 189


state 205

   58 defineFunc: defineType name funcHeaderV @3 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 235
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 206

   88 initOperator: OPERATOR LBRACE initOperatorContexts RBRACE . endls

    ENDL  shift, and go to state 7

    endls  go to state 236


state 207

   89 initOperatorContexts: initOperatorContexts initOperatorContext .

    $default  reduce using rule 89 (initOperatorContexts)


state 208

  103 operator: NE .

    $default  reduce using rule 103 (operator)


state 209

  102 operator: EQ .

    $default  reduce using rule 102 (operator)


state 210

  105 operator: GE .

    $default  reduce using rule 105 (operator)


state 211

  104 operator: GT .

    $default  reduce using rule 104 (operator)


state 212

  107 operator: LE .

    $default  reduce using rule 107 (operator)


state 213

  106 operator: LT .

    $default  reduce using rule 106 (operator)


state 214

   98 operator: MINUS .

    $default  reduce using rule 98 (operator)


state 215

   97 operator: PLUS .

    $default  reduce using rule 97 (operator)


state 216

  101 operator: MODULUS .

    $default  reduce using rule 101 (operator)


state 217

  100 operator: DIVIDE .

    $default  reduce using rule 100 (operator)


state 218

   99 operator: MULT .

    $default  reduce using rule 99 (operator)


state 219

   92 initOperatorContext: defineType operator . defineType ASSIGN name endls

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 237


state 220

   63 funcHeaderE: LPAREN @5 paramList RPAREN . COLON defineType

    COLON  shift, and go to state 238


state 221

   21 dictContext: dictContext lists dictList .

    $default  reduce using rule 21 (dictContext)


state 222

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   50 exprList: exprList lists expr .

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126

    $default  reduce using rule 50 (exprList)


state 223

  116 subSpace: LBRACE endlsn . stats RBRACE
  118         | LBRACE endlsn . stat endlsn RBRACE

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 14
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 124 (stats)]
    ENDL       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 124 (stats)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 124 (stats)]
    LPAREN     [reduce using rule 124 (stats)]
    RBRACE     reduce using rule 93 (assignment)
    RBRACE     [reduce using rule 124 (stats)]
    LBRACE     [reduce using rule 124 (stats)]
    RETURN     [reduce using rule 124 (stats)]
    IF         [reduce using rule 124 (stats)]
    FOR        [reduce using rule 124 (stats)]
    WHILE      [reduce using rule 124 (stats)]
    SWITCH     [reduce using rule 124 (stats)]
    BREAK      [reduce using rule 124 (stats)]
    CONTINUE   [reduce using rule 124 (stats)]
    CONST      [reduce using rule 124 (stats)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 23
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    controlSpace   go to state 41
    stats          go to state 239
    stat           go to state 240
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 224

  119 subSpace: endls subSpace .

    $default  reduce using rule 119 (subSpace)


state 225

   78 ifPart: IF LPAREN expr RPAREN @6 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 241
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 226

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON . expr SEMICOLON iteration RPAREN @2 subSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 242
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 227

  167 defineWhile: WHILE LPAREN expr RPAREN @12 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 243
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 228

  138 defineSwitch: SWITCH LPAREN expr RPAREN @9 . switchSpace

    ENDL    shift, and go to state 7
    LBRACE  shift, and go to state 244

    endls        go to state 245
    switchSpace  go to state 246


state 229

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   82 elseIfPart: ELSE IF LPAREN expr . RPAREN @7 subSpace

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    RPAREN   shift, and go to state 247


state 230

   84 elsePart: ELSE @8 subSpace .

    $default  reduce using rule 84 (elsePart)


state 231

   76 defineIf: ifPart endlsn elseIfParts endlsn elsePart .

    $default  reduce using rule 76 (defineIf)


state 232

    8 list: list . endls
  156 typeListP: typeListP list . defineType

    NAME    shift, and go to state 9
    ENDL    shift, and go to state 7
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    endls       go to state 145
    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 248


state 233

   64 funcType: defineType COLON LPAREN typeList RPAREN .

    $default  reduce using rule 64 (funcType)


state 234

   61 funcHeaderV: LPAREN paramList RPAREN .

    $default  reduce using rule 61 (funcHeaderV)


state 235

   58 defineFunc: defineType name funcHeaderV @3 subSpace .

    $default  reduce using rule 58 (defineFunc)


state 236

    1 endls: endls . ENDL
   88 initOperator: OPERATOR LBRACE initOperatorContexts RBRACE endls .

    ENDL  shift, and go to state 51

    $default  reduce using rule 88 (initOperator)


state 237

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
   92 initOperatorContext: defineType operator defineType . ASSIGN name endls

    COLON    shift, and go to state 96
    ASSIGN   shift, and go to state 249
    BRACKET  shift, and go to state 97


state 238

   63 funcHeaderE: LPAREN @5 paramList RPAREN COLON . defineType

    NAME    shift, and go to state 9
    LPAREN  shift, and go to state 13
    LBRACE  shift, and go to state 14

    name        go to state 55
    arrayType   go to state 26
    dictType    go to state 27
    funcType    go to state 30
    defineType  go to state 250


state 239

  116 subSpace: LBRACE endlsn stats . RBRACE
  125 stats: stats . stat endc

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    RBRACE     shift, and go to state 251
    LBRACE     shift, and go to state 14
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]

    endls          go to state 23
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    controlSpace   go to state 41
    stat           go to state 94
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 240

  118 subSpace: LBRACE endlsn stat . endlsn RBRACE
  126 stats: stat . endc

    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12

    $default  reduce using rule 3 (endlsn)

    endls   go to state 252
    endlsn  go to state 253
    endc    go to state 95


state 241

   78 ifPart: IF LPAREN expr RPAREN @6 subSpace .

    $default  reduce using rule 78 (ifPart)


state 242

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr . SEMICOLON iteration RPAREN @2 subSpace

    OR         shift, and go to state 114
    AND        shift, and go to state 115
    NE         shift, and go to state 116
    EQ         shift, and go to state 117
    GE         shift, and go to state 118
    GT         shift, and go to state 119
    LE         shift, and go to state 120
    LT         shift, and go to state 121
    MINUS      shift, and go to state 122
    PLUS       shift, and go to state 123
    MODULUS    shift, and go to state 124
    DIVIDE     shift, and go to state 125
    MULT       shift, and go to state 126
    SEMICOLON  shift, and go to state 254


state 243

  167 defineWhile: WHILE LPAREN expr RPAREN @12 subSpace .

    $default  reduce using rule 167 (defineWhile)


state 244

  139 switchSpace: LBRACE . switchStats RBRACE

    ENDL     shift, and go to state 7
    CASE     shift, and go to state 255
    DEFAULT  shift, and go to state 256

    ENDL      [reduce using rule 143 (switchStat)]
    CASE      [reduce using rule 143 (switchStat)]
    DEFAULT   [reduce using rule 143 (switchStat)]
    $default  reduce using rule 143 (switchStat)

    endls        go to state 257
    switchStats  go to state 258
    switchStat   go to state 259


state 245

    1 endls: endls . ENDL
  140 switchSpace: endls . switchSpace

    ENDL    shift, and go to state 159
    LBRACE  shift, and go to state 244

    endls        go to state 245
    switchSpace  go to state 260


state 246

  138 defineSwitch: SWITCH LPAREN expr RPAREN @9 switchSpace .

    $default  reduce using rule 138 (defineSwitch)


state 247

   82 elseIfPart: ELSE IF LPAREN expr RPAREN . @7 subSpace

    $default  reduce using rule 81 (@7)

    @7  go to state 261


state 248

   16 arrayType: defineType . BRACKET
   64 funcType: defineType . COLON LPAREN typeList RPAREN
  156 typeListP: typeListP list defineType .

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 156 (typeListP)


state 249

   92 initOperatorContext: defineType operator defineType ASSIGN . name endls

    NAME  shift, and go to state 9

    name  go to state 262


state 250

   16 arrayType: defineType . BRACKET
   63 funcHeaderE: LPAREN @5 paramList RPAREN COLON defineType .
   64 funcType: defineType . COLON LPAREN typeList RPAREN

    COLON    shift, and go to state 96
    BRACKET  shift, and go to state 97

    $default  reduce using rule 63 (funcHeaderE)


state 251

  116 subSpace: LBRACE endlsn stats RBRACE .

    $default  reduce using rule 116 (subSpace)


state 252

    1 endls: endls . ENDL
    4 endlsn: endls .
    6 endc: endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 6 (endc)]
    RBRACE    reduce using rule 4 (endlsn)
    RBRACE    [reduce using rule 6 (endc)]
    $default  reduce using rule 6 (endc)


state 253

  118 subSpace: LBRACE endlsn stat endlsn . RBRACE

    RBRACE  shift, and go to state 263


state 254

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON . iteration RPAREN @2 subSpace

    NAME  shift, and go to state 9

    $default  reduce using rule 93 (assignment)

    name         go to state 69
    defineIden   go to state 31
    idenFunc     go to state 32
    idenBracket  go to state 33
    idenTarget   go to state 34
    assignment   go to state 37
    iteration    go to state 264


state 255

  146 switchStat: CASE . LPAREN expr RPAREN @10 subSpace

    LPAREN  shift, and go to state 265


state 256

  148 switchStat: DEFAULT . @11 subSpace

    $default  reduce using rule 147 (@11)

    @11  go to state 266


state 257

    1 endls: endls . ENDL
  144 switchStat: endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 144 (switchStat)]
    $default  reduce using rule 144 (switchStat)


state 258

  139 switchSpace: LBRACE switchStats . RBRACE
  141 switchStats: switchStats . switchStat

    ENDL     shift, and go to state 7
    RBRACE   shift, and go to state 267
    CASE     shift, and go to state 255
    DEFAULT  shift, and go to state 256

    ENDL     [reduce using rule 143 (switchStat)]
    RBRACE   [reduce using rule 143 (switchStat)]
    CASE     [reduce using rule 143 (switchStat)]
    DEFAULT  [reduce using rule 143 (switchStat)]

    endls       go to state 257
    switchStat  go to state 268


state 259

  142 switchStats: switchStat .

    $default  reduce using rule 142 (switchStats)


state 260

  140 switchSpace: endls switchSpace .

    $default  reduce using rule 140 (switchSpace)


state 261

   82 elseIfPart: ELSE IF LPAREN expr RPAREN @7 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 269
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 262

   92 initOperatorContext: defineType operator defineType ASSIGN name . endls

    ENDL  shift, and go to state 7

    endls  go to state 270


state 263

  118 subSpace: LBRACE endlsn stat endlsn RBRACE .

    $default  reduce using rule 118 (subSpace)


state 264

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration . RPAREN @2 subSpace

    RPAREN  shift, and go to state 271


state 265

  146 switchStat: CASE LPAREN . expr RPAREN @10 subSpace

    NAME           shift, and go to state 9
    INT            shift, and go to state 60
    NUMBER         shift, and go to state 61
    STRING         shift, and go to state 62
    VALUE_BOOLEAN  shift, and go to state 63
    VALUE_VOID     shift, and go to state 64
    RPAREN         shift, and go to state 65
    LPAREN         shift, and go to state 66
    LBRACE         shift, and go to state 67
    LBRACKET       shift, and go to state 68

    name         go to state 69
    arrayExpr    go to state 70
    dictExpr     go to state 71
    expr         go to state 272
    funcExpr     go to state 73
    funcHeaderE  go to state 74
    defineIden   go to state 75
    idenFunc     go to state 76
    idenBracket  go to state 33
    idenTarget   go to state 34


state 266

  148 switchStat: DEFAULT @11 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    ENDL      [reduce using rule 93 (assignment)]
    $default  reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 273
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 267

  139 switchSpace: LBRACE switchStats RBRACE .

    $default  reduce using rule 139 (switchSpace)


state 268

  141 switchStats: switchStats switchStat .

    $default  reduce using rule 141 (switchStats)


state 269

   82 elseIfPart: ELSE IF LPAREN expr RPAREN @7 subSpace .

    $default  reduce using rule 82 (elseIfPart)


state 270

    1 endls: endls . ENDL
   92 initOperatorContext: defineType operator defineType ASSIGN name endls .

    ENDL  shift, and go to state 51

    ENDL      [reduce using rule 92 (initOperatorContext)]
    $default  reduce using rule 92 (initOperatorContext)


state 271

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN . @2 subSpace

    $default  reduce using rule 55 (@2)

    @2  go to state 274


state 272

   26 expr: expr . AND expr
   27     | expr . OR expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . GT expr
   31     | expr . GE expr
   32     | expr . LT expr
   33     | expr . LE expr
   34     | expr . PLUS expr
   35     | expr . MINUS expr
   36     | expr . MULT expr
   37     | expr . DIVIDE expr
   38     | expr . MODULUS expr
  146 switchStat: CASE LPAREN expr . RPAREN @10 subSpace

    OR       shift, and go to state 114
    AND      shift, and go to state 115
    NE       shift, and go to state 116
    EQ       shift, and go to state 117
    GE       shift, and go to state 118
    GT       shift, and go to state 119
    LE       shift, and go to state 120
    LT       shift, and go to state 121
    MINUS    shift, and go to state 122
    PLUS     shift, and go to state 123
    MODULUS  shift, and go to state 124
    DIVIDE   shift, and go to state 125
    MULT     shift, and go to state 126
    RPAREN   shift, and go to state 275


state 273

  148 switchStat: DEFAULT @11 subSpace .

    $default  reduce using rule 148 (switchStat)


state 274

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    NAME       [reduce using rule 93 (assignment)]
    ENDL       [reduce using rule 93 (assignment)]
    SEMICOLON  [reduce using rule 93 (assignment)]
    LPAREN     [reduce using rule 93 (assignment)]
    LBRACE     [reduce using rule 93 (assignment)]
    $default   reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 276
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 275

  146 switchStat: CASE LPAREN expr RPAREN . @10 subSpace

    $default  reduce using rule 145 (@10)

    @10  go to state 277


state 276

   56 defineFor: FOR LPAREN paramList @1 SEMICOLON expr SEMICOLON iteration RPAREN @2 subSpace .

    $default  reduce using rule 56 (defineFor)


state 277

  146 switchStat: CASE LPAREN expr RPAREN @10 . subSpace

    NAME       shift, and go to state 9
    ENDL       shift, and go to state 7
    SEMICOLON  shift, and go to state 12
    LPAREN     shift, and go to state 13
    LBRACE     shift, and go to state 183
    RETURN     shift, and go to state 15
    IF         shift, and go to state 16
    FOR        shift, and go to state 17
    WHILE      shift, and go to state 18
    SWITCH     shift, and go to state 19
    BREAK      shift, and go to state 20
    CONTINUE   shift, and go to state 21
    CONST      shift, and go to state 22

    ENDL      [reduce using rule 93 (assignment)]
    $default  reduce using rule 93 (assignment)

    endls          go to state 184
    endc           go to state 24
    name           go to state 25
    arrayType      go to state 26
    dictType       go to state 27
    defineFor      go to state 28
    defineFunc     go to state 29
    funcType       go to state 30
    defineIden     go to state 31
    idenFunc       go to state 32
    idenBracket    go to state 33
    idenTarget     go to state 34
    defineIf       go to state 35
    ifPart         go to state 36
    assignment     go to state 37
    iteration      go to state 38
    defineParam    go to state 39
    paramListP     go to state 40
    subSpace       go to state 278
    controlSpace   go to state 41
    stat           go to state 186
    defineStat     go to state 44
    defineSwitch   go to state 45
    defineType     go to state 46
    defineVariale  go to state 48
    defineWhile    go to state 49


state 278

  146 switchStat: CASE LPAREN expr RPAREN @10 subSpace .

    $default  reduce using rule 146 (switchStat)
